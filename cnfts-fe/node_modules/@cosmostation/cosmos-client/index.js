"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOfflineSigner = exports.getMobileOfflineSignerWithConnect = exports.connectWallet = exports.getExtensionOfflineSigner = exports.ExtensionInstallError = void 0;
var extension_client_1 = require("@cosmostation/extension-client");
var wc_modal_1 = require("@cosmostation/wc-modal");
var browser_utils_1 = require("@walletconnect/browser-utils");
var client_1 = __importDefault(require("@walletconnect/client"));
var utils_1 = require("@walletconnect/utils");
var error_1 = require("./error");
Object.defineProperty(exports, "ExtensionInstallError", { enumerable: true, get: function () { return error_1.ExtensionInstallError; } });
var getExtensionOfflineSigner = function (chainId) { return __awaiter(void 0, void 0, void 0, function () {
    var provider_1, signer, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _b.trys.push([0, 2, , 3]);
                return [4 /*yield*/, (0, extension_client_1.cosmos)()];
            case 1:
                provider_1 = _b.sent();
                signer = {
                    getAccounts: function () { return __awaiter(void 0, void 0, void 0, function () {
                        var response;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, provider_1.getAccount(chainId)];
                                case 1:
                                    response = _a.sent();
                                    return [2 /*return*/, [{ address: response.address, pubkey: response.publicKey, algo: 'secp256k1' }]];
                            }
                        });
                    }); },
                    signAmino: function (_, signDoc) { return __awaiter(void 0, void 0, void 0, function () {
                        var response;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, provider_1.signAmino(chainId, signDoc)];
                                case 1:
                                    response = _a.sent();
                                    return [2 /*return*/, { signed: response.signed_doc, signature: { pub_key: response.pub_key, signature: response.signature } }];
                            }
                        });
                    }); },
                    signDirect: function (_, signDoc) { return __awaiter(void 0, void 0, void 0, function () {
                        var response;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, provider_1.signDirect(chainId, {
                                        account_number: String(signDoc.accountNumber),
                                        auth_info_bytes: signDoc.authInfoBytes,
                                        body_bytes: signDoc.bodyBytes,
                                        chain_id: signDoc.chainId,
                                    })];
                                case 1:
                                    response = _a.sent();
                                    return [2 /*return*/, {
                                            signed: {
                                                accountNumber: response.signed_doc.account_number,
                                                chainId: response.signed_doc.chain_id,
                                                authInfoBytes: response.signed_doc.auth_info_bytes,
                                                bodyBytes: response.signed_doc.body_bytes,
                                            },
                                            signature: { pub_key: response.pub_key, signature: response.signature },
                                        }];
                            }
                        });
                    }); },
                };
                return [2 /*return*/, signer];
            case 2:
                _a = _b.sent();
                throw new error_1.ExtensionInstallError();
            case 3: return [2 /*return*/];
        }
    });
}); };
exports.getExtensionOfflineSigner = getExtensionOfflineSigner;
var connectWallet = function () { return __awaiter(void 0, void 0, void 0, function () {
    var connector;
    return __generator(this, function (_a) {
        connector = new client_1.default({
            bridge: 'https://bridge.walletconnect.org',
            signingMethods: ['cosmostation_wc_accounts_v1', 'cosmostation_wc_sign_tx_v1'],
            qrcodeModal: new wc_modal_1.CosmostationWCModal(),
        });
        return [2 /*return*/, new Promise(function (resolve, reject) {
                void connector.killSession();
                void connector.createSession();
                connector.on('connect', function (error) {
                    if (error) {
                        return reject(error);
                    }
                    return resolve(connector);
                });
            })];
    });
}); };
exports.connectWallet = connectWallet;
var getMobileOfflineSignerWithConnect = function (chainId) { return __awaiter(void 0, void 0, void 0, function () {
    var connector, signer;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.connectWallet)()];
            case 1:
                connector = _a.sent();
                if (!connector) {
                    throw new error_1.MobileConnectError();
                }
                signer = {
                    getAccounts: function () { return __awaiter(void 0, void 0, void 0, function () {
                        var params, keys, accounts, err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    params = {
                                        id: (0, utils_1.payloadId)(),
                                        jsonrpc: '2.0',
                                        method: 'cosmostation_wc_accounts_v1',
                                        params: [chainId],
                                    };
                                    return [4 /*yield*/, connector.sendCustomRequest(params)];
                                case 1:
                                    keys = (_a.sent());
                                    accounts = keys.map(function (key) {
                                        return ({
                                            address: key.bech32Address,
                                            algo: 'secp256k1',
                                            pubkey: key.pubKey,
                                        });
                                    });
                                    return [2 /*return*/, accounts];
                                case 2:
                                    err_1 = _a.sent();
                                    throw new error_1.GetAccountError();
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); },
                    signAmino: function (signerAddress, signDoc) { return __awaiter(void 0, void 0, void 0, function () {
                        var signedTx, err_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, connector.sendCustomRequest({
                                            id: (0, utils_1.payloadId)(),
                                            jsonrpc: '2.0',
                                            method: 'cosmostation_wc_sign_tx_v1',
                                            params: [chainId, signerAddress, signDoc],
                                        })];
                                case 1:
                                    signedTx = (_a.sent());
                                    return [2 /*return*/, signedTx[0]];
                                case 2:
                                    err_2 = _a.sent();
                                    throw new error_1.SignError();
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); },
                };
                return [2 /*return*/, signer];
        }
    });
}); };
exports.getMobileOfflineSignerWithConnect = getMobileOfflineSignerWithConnect;
var getOfflineSigner = function (chainId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if ((0, browser_utils_1.isMobile)()) {
            return [2 /*return*/, (0, exports.getMobileOfflineSignerWithConnect)(chainId)];
        }
        return [2 /*return*/, (0, exports.getExtensionOfflineSigner)(chainId)];
    });
}); };
exports.getOfflineSigner = getOfflineSigner;
