"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getModalDetails = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@chakra-ui/react");
var _react2 = _interopRequireDefault(require("react"));
var _go = require("react-icons/go");
var _ri = require("react-icons/ri");
var _components = require("./components");
/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */

var getModalDetails = function getModalDetails(walletManager, modalIsReset, resetModal, handleClose, initialFocus, version) {
  var ModalContent, DisplayWalletList, InstallWalletButton, QRCode, ModalHead;
  switch (version) {
    case 'simple_v1':
      ModalContent = _components.SimpleDisplayModalContentV1;
      DisplayWalletList = _components.SimpleDisplayWalletListV1;
      InstallWalletButton = _components.SimpleInstallWalletButtonV1;
      QRCode = _components.SimpleQRCodeV1;
      ModalHead = _components.SimpleModalHeadV1;
      break;
    case 'simple_v2':
      ModalContent = _components.SimpleDisplayModalContent;
      DisplayWalletList = _components.SimpleDisplayWalletList;
      InstallWalletButton = _components.SimpleInstallWalletButton;
      QRCode = _components.SimpleQRCode;
      ModalHead = _components.SimpleModalHead;
      break;
  }
  var wallets = walletManager.wallets,
    wallet = walletManager.currentWallet,
    walletInfo = walletManager.currentWalletInfo,
    walletStatus = walletManager.walletStatus,
    address = walletManager.address,
    username = walletManager.username,
    message = walletManager.message,
    isMobile = walletManager.isMobile,
    setCurrentWallet = walletManager.setCurrentWallet,
    connect = walletManager.connect,
    disconnect = walletManager.disconnect,
    isWalletDisconnected = walletManager.isWalletDisconnected;
  var modalHead, modalContent;

  /* ================================== */
  /*           choose wallet            */
  /* ================================== */

  if (!wallet || modalIsReset) {
    modalHead = /*#__PURE__*/_react2["default"].createElement(ModalHead, {
      title: "Select your wallet",
      backButton: false,
      handleClose: handleClose
    });
    var walletData = wallets.map(function (_ref) {
      var _ref$walletInfo = _ref.walletInfo,
        name = _ref$walletInfo.name,
        logo = _ref$walletInfo.logo,
        prettyName = _ref$walletInfo.prettyName,
        mode = _ref$walletInfo.mode,
        mobileDisabled = _ref$walletInfo.mobileDisabled;
      return {
        name: name,
        logo: logo,
        prettyName: prettyName,
        mode: mode,
        mobileDisabled: mobileDisabled,
        onClick: function () {
          var _onClick = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    resetModal(false);
                    if (isWalletDisconnected) {
                      _context.next = 4;
                      break;
                    }
                    _context.next = 4;
                    return disconnect();
                  case 4:
                    setCurrentWallet(name);
                    _context.next = 7;
                    return connect();
                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          function onClick() {
            return _onClick.apply(this, arguments);
          }
          return onClick;
        }()
      };
    });
    modalContent = /*#__PURE__*/_react2["default"].createElement(DisplayWalletList, {
      initialFocus: initialFocus,
      walletsData: version === 'simple_v2' ? walletData.sort(function (a, b) {
        if (a.mode === b.mode) {
          return 0;
        } else if (a.mode !== 'wallet-connect') {
          return -1;
        } else {
          return 1;
        }
      }) : walletData
    });
    return [modalHead, modalContent];
  }

  /* ================================== */
  /*           selected wallet          */
  /* ================================== */

  if (!walletInfo) {
    throw new Error('No basic wallet information!');
  }
  var displayName = walletInfo.prettyName || walletInfo.name;

  /* ================================== */
  /*    selected wallet: modal head     */
  /* ================================== */

  function handleBack() {
    resetModal(true);
  }
  modalHead = /*#__PURE__*/_react2["default"].createElement(ModalHead, {
    title: displayName,
    backButton: true,
    handleClose: handleClose,
    handleBack: handleBack
  });

  /* ================================== */
  /*   selected wallet: modal content   */
  /* ================================== */

  var downloadInfo = wallet.downloadInfo,
    walletName = wallet.walletName;
  function handleDisconnect() {
    return _handleDisconnect.apply(this, arguments);
  }
  function _handleDisconnect() {
    _handleDisconnect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return disconnect();
            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _handleDisconnect.apply(this, arguments);
  }
  function handleConnect() {
    return _handleConnect.apply(this, arguments);
  }
  function _handleConnect() {
    _handleConnect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              setCurrentWallet(walletName);
              _context3.next = 3;
              return connect();
            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _handleConnect.apply(this, arguments);
  }
  function handleChangeWallet() {
    resetModal(true);
  }
  function handleOpenDownload() {
    if (downloadInfo !== null && downloadInfo !== void 0 && downloadInfo.link) {
      window.open(downloadInfo === null || downloadInfo === void 0 ? void 0 : downloadInfo.link, '_blank');
    }
  }
  var modalInfo = {
    NotExist: {
      logoStatus: _components.LogoStatus.Error,
      header: "".concat(displayName, " Not Installed"),
      buttonText: "Install ".concat(displayName),
      desc: downloadInfo !== null && downloadInfo !== void 0 && downloadInfo.link ? "If ".concat(displayName.toLowerCase(), " is installed on your device, please refresh this page or follow the browser instructions.") : "Download link not provided. Try searching it or consulting the developer team.",
      onClick: handleOpenDownload,
      buttonDisabled: downloadInfo !== null && downloadInfo !== void 0 && downloadInfo.link ? false : true,
      icon: (downloadInfo === null || downloadInfo === void 0 ? void 0 : downloadInfo.icon) || _go.GoDesktopDownload
    },
    Disconnected: {
      logoStatus: _components.LogoStatus.Warning,
      header: isMobile ? 'Wallet Authorization' : 'Wallet is Disconnected',
      desc: isMobile ? 'Approve connection in wallet app' : void 0,
      buttonText: isMobile ? 'Open App' : 'Connect Wallet',
      onClick: handleConnect,
      bottomLink: isMobile && downloadInfo ? /*#__PURE__*/_react2["default"].createElement(_react.Button, {
        variant: "link",
        onClick: handleOpenDownload
      }, /*#__PURE__*/_react2["default"].createElement(_react.Text, {
        as: "u",
        fontSize: "sm"
      }, "don't have a wallet?")) : void 0
    },
    Connected: {
      buttonText: 'Disconnect',
      onClick: handleDisconnect,
      icon: /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
        as: _ri.RiDoorOpenFill
      })
    },
    Connecting: {
      logoStatus: _components.LogoStatus.Loading,
      header: 'Requesting Connection',
      desc: wallet.qrUrl ? "Approve ".concat(displayName, " connection request on your mobile.") : "Open ".concat(displayName, " to connect your wallet.")
    },
    Rejected: {
      logoStatus: _components.LogoStatus.Error,
      header: 'Request Rejected',
      desc: wallet.rejectMessageTarget || 'Connection permission is denied.',
      buttonText: 'Reconnect',
      onClick: handleConnect
    },
    Error: {
      logoStatus: _components.LogoStatus.Error,
      header: 'Oops! Something wrong...',
      desc: message,
      buttonText: 'Change Wallet',
      onClick: handleChangeWallet
    }
  };
  function getBottomButtonByStatus(status) {
    var info = modalInfo[status];
    switch (status) {
      case 'Connecting':
        return void 0;
      case 'NotExist':
        return /*#__PURE__*/_react2["default"].createElement(InstallWalletButton, {
          icon: info.icon,
          text: info.buttonText,
          onClick: info.onClick,
          disabled: info.buttonDisabled
        });
      default:
        return /*#__PURE__*/_react2["default"].createElement(_react.Box, {
          px: 6
        }, /*#__PURE__*/_react2["default"].createElement(_components.ConnectWalletButton, {
          size: "lg",
          variant: "primary",
          leftIcon: info.icon,
          buttonText: info.buttonText,
          onClickConnectBtn: info.onClick
        }));
    }
  }
  function getModalContentByStatus(status) {
    if (!walletInfo) {
      throw new Error('No basic wallet information!');
    }
    if (status === 'Connected') {
      return /*#__PURE__*/_react2["default"].createElement(ModalContent, {
        logo: _components.Astronaut,
        username: username,
        walletIcon: typeof walletInfo.logo === 'string' && walletInfo.logo || void 0,
        addressButton: /*#__PURE__*/_react2["default"].createElement(_components.CopyAddressButton, {
          size: "sm",
          isRound: true,
          address: address
        }),
        bottomButton: getBottomButtonByStatus(status)
      });
    }
    if (status === 'Disconnected' && walletInfo.mode === 'wallet-connect' && !wallet.appUrl) {
      return /*#__PURE__*/_react2["default"].createElement(QRCode, {
        link: wallet.qrUrl,
        description: "Open ".concat(displayName, " App to Scan")
      });
    }
    var info = modalInfo[status];
    return /*#__PURE__*/_react2["default"].createElement(ModalContent, {
      status: info.logoStatus,
      logo: walletInfo.logo,
      contentHeader: info.header,
      contentDesc: info.desc,
      bottomButton: getBottomButtonByStatus(status),
      bottomLink: info.bottomLink
    });
  }
  modalContent = getModalContentByStatus(walletStatus);
  return [modalHead, modalContent];
};
exports.getModalDetails = getModalDetails;