"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextWithIconLink = exports.MenuLinkButton = exports.ListLinkButton = exports.DefaultLink = exports.DefaultIconButton = exports.DefaultIcon = exports.DefaultCard = void 0;
exports.handleChangeColorModeValue = handleChangeColorModeValue;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@chakra-ui/react");
var _react2 = _interopRequireDefault(require("react"));
/* eslint-disable @typescript-eslint/no-explicit-any */

// use for let color mode value fit Rules of Hooks
function handleChangeColorModeValue(colorMode, light, dark) {
  if (colorMode === 'light') return light;
  if (colorMode === 'dark') return dark;
}

// ðŸ”§ use forwardRef to fix ref-warnings =>
// https://github.com/vercel/next.js/issues/7915#issuecomment-745117649
var DefaultLink = /*#__PURE__*/_react2["default"].forwardRef(function (props, ref) {
  return /*#__PURE__*/_react2["default"].createElement(_react.Link, (0, _extends2["default"])({
    w: "full",
    ref: ref,
    _hover: {
      textDecoration: 'none'
    },
    _focus: {
      outline: 'none'
    }
  }, props), props.children);
});
exports.DefaultLink = DefaultLink;
var DefaultIconButton = function DefaultIconButton(_ref) {
  var icon = _ref.icon,
    label = _ref.label,
    showTooltip = _ref.showTooltip,
    chakraButtonProps = _ref.chakraButtonProps,
    chakraTooltipProps = _ref.chakraTooltipProps;
  return showTooltip ? /*#__PURE__*/_react2["default"].createElement(_react.Tooltip, (0, _extends2["default"])({
    label: label,
    hasArrow: true,
    bg: (0, _react.useColorModeValue)('primary.300', 'primary.100')
  }, chakraTooltipProps), /*#__PURE__*/_react2["default"].createElement(_react.Button, (0, _extends2["default"])({
    boxShadow: (0, _react.useColorModeValue)('0 2px 5px -2px #d1d1d1', '0 1px 1px #535353, 0 3px 4px -1px #222'),
    p: 2.5,
    _focus: {
      outline: 'none'
    }
  }, chakraButtonProps), /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    as: icon,
    w: 5,
    h: 5
  }))) : /*#__PURE__*/_react2["default"].createElement(_react.Button, (0, _extends2["default"])({
    boxShadow: (0, _react.useColorModeValue)('0 2px 5px -2px #d1d1d1', '0 0 2px #555'),
    p: 2.5
  }, chakraButtonProps), /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    as: icon,
    w: 5,
    h: 5
  }));
};
exports.DefaultIconButton = DefaultIconButton;
var ListLinkButton = function ListLinkButton(_ref2) {
  var text = _ref2.text,
    chakraButtonProps = _ref2.chakraButtonProps;
  return /*#__PURE__*/_react2["default"].createElement(_react.Button, (0, _extends2["default"])({
    variant: "outline",
    boxShadow: "base",
    w: "full",
    h: 12,
    borderRadius: 5
  }, chakraButtonProps), text);
};
exports.ListLinkButton = ListLinkButton;
var MenuLinkButton = function MenuLinkButton(_ref3) {
  var icon = _ref3.icon,
    text = _ref3.text,
    _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? 'md' : _ref3$size;
  var _useColorMode = (0, _react.useColorMode)(),
    colorMode = _useColorMode.colorMode;
  var SIZES = {
    lg: {
      h: 12,
      fontSize: 'lg'
    },
    md: {
      h: 10,
      fontSize: 'md'
    },
    sm: {
      h: 8,
      fontSize: 'sm'
    }
  };
  return /*#__PURE__*/_react2["default"].createElement(_react.Button, {
    title: text,
    display: "flex",
    variant: "ghost",
    justifyContent: "start",
    alignItems: "center",
    fontSize: SIZES[size].fontSize,
    fontWeight: "medium",
    textAlign: "start",
    px: 2,
    w: "full",
    h: "full",
    minH: SIZES[size].h,
    maxH: "fit-content",
    whiteSpace: "break-spaces",
    lineHeight: 1.1,
    _hover: {
      bg: handleChangeColorModeValue(colorMode, 'gray.200', 'gray.700')
    },
    _focus: {
      boxShadow: '0 0 0 2px #C47CCF'
    }
  }, /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    isInline: true,
    spacing: 2,
    alignItems: "center"
  }, icon, /*#__PURE__*/_react2["default"].createElement(_react.Text, null, text)));
};
exports.MenuLinkButton = MenuLinkButton;
var TextWithIconLink = function TextWithIconLink(_ref4) {
  var text = _ref4.text,
    icon = _ref4.icon;
  return /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    isInline: true,
    alignItems: "center",
    spacing: 1,
    opacity: 0.7
  }, /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    fontWeight: "semibold"
  }, text), /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    as: icon
  }));
};
exports.TextWithIconLink = TextWithIconLink;
var DefaultIcon = function DefaultIcon(_ref5) {
  var _ref5$size = _ref5.size,
    size = _ref5$size === void 0 ? 'md' : _ref5$size,
    icon = _ref5.icon;
  var SIZES = {
    lg: {
      imageSize: 9
    },
    md: {
      imageSize: 8
    },
    sm: {
      imageSize: 6
    }
  };
  if (typeof icon === 'string') return /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    borderRadius: "full",
    overflow: "hidden",
    w: SIZES[size].imageSize,
    minW: SIZES[size].imageSize,
    maxW: SIZES[size].imageSize,
    h: SIZES[size].imageSize,
    minH: SIZES[size].imageSize,
    maxH: SIZES[size].imageSize
  }, /*#__PURE__*/_react2["default"].createElement(_react.Image, {
    w: "full",
    alt: icon,
    src: icon,
    fallbackSrc: 'https://dummyimage.com/200x200/cfcfcf/fff&text=X'
  }));
  return /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    borderRadius: "full",
    overflow: "hidden",
    w: SIZES[size].imageSize,
    minW: SIZES[size].imageSize,
    maxW: SIZES[size].imageSize,
    h: SIZES[size].imageSize,
    minH: SIZES[size].imageSize,
    maxH: SIZES[size].imageSize
  }, icon);
};
exports.DefaultIcon = DefaultIcon;
var DefaultCard = function DefaultCard(_ref6) {
  var title = _ref6.title,
    children = _ref6.children;
  return /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    w: "full",
    bg: (0, _react.useColorModeValue)('white', 'gray.700'),
    boxShadow: (0, _react.useColorModeValue)('0 2px 3px #e3e3e3', '0 1px 3px #6e6e6e, 0 5px 12px -5px #858585'),
    borderRadius: "lg",
    p: 6
  }, /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    fontWeight: "semibold",
    fontSize: "lg"
  }, title), /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    mx: -6
  }, /*#__PURE__*/_react2["default"].createElement(_react.Divider, {
    my: 6
  })), children);
};
exports.DefaultCard = DefaultCard;