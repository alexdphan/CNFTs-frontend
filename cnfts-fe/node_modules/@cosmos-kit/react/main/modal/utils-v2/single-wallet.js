"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSingleWalletView = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@chakra-ui/react");
var _react2 = _interopRequireDefault(require("react"));
var _go = require("react-icons/go");
var _ri = require("react-icons/ri");
var _components = require("../components");
/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-explicit-any */

var getSingleWalletView = function getSingleWalletView(version, current, qrCodeWallet, setOpen, setDisplay, setQRCodeWallet) {
  var ModalContent, InstallWalletButton, QRCode, ModalHead;
  switch (version) {
    case 'simple_v1':
      ModalContent = _components.SimpleDisplayModalContentV1;
      InstallWalletButton = _components.SimpleInstallWalletButtonV1;
      QRCode = _components.SimpleQRCodeV1;
      ModalHead = _components.SimpleModalHeadV1;
      break;
    case 'simple_v2':
      ModalContent = _components.SimpleDisplayModalContent;
      InstallWalletButton = _components.SimpleInstallWalletButton;
      QRCode = _components.SimpleQRCode;
      ModalHead = _components.SimpleModalHead;
      break;
  }
  if (qrCodeWallet && qrCodeWallet.walletStatus === 'Disconnected') {
    var _displayName = qrCodeWallet.walletInfo.prettyName || qrCodeWallet.walletName;
    return [/*#__PURE__*/_react2["default"].createElement(ModalHead, {
      title: _displayName,
      backButton: true,
      handleClose: function handleClose() {
        setOpen(false);
        setQRCodeWallet(void 0);
        setDisplay('list');
      },
      handleBack: function handleBack() {
        return setDisplay('list');
      }
    }), /*#__PURE__*/_react2["default"].createElement(QRCode, {
      link: qrCodeWallet.qrUrl,
      description: "Open ".concat(_displayName, " App to Scan")
    })];
  }
  if (!current) {
    return [void 0, void 0];
  }
  var _ref = current,
    _ref$walletInfo = _ref.walletInfo,
    prettyName = _ref$walletInfo.prettyName,
    name = _ref$walletInfo.name,
    logo = _ref$walletInfo.logo,
    status = _ref.walletStatus,
    downloadInfo = _ref.downloadInfo,
    isMobile = _ref.isMobile,
    connect = _ref.connect,
    disconnect = _ref.disconnect,
    qrUrl = _ref.qrUrl,
    rejectMessageTarget = _ref.rejectMessageTarget,
    message = _ref.message,
    username = _ref.username,
    address = _ref.address;
  var displayName = prettyName || name;
  var modalInfo = {
    NotExist: {
      logoStatus: _components.LogoStatus.Error,
      header: "".concat(displayName, " Not Installed"),
      buttonText: "Install ".concat(displayName),
      desc: downloadInfo !== null && downloadInfo !== void 0 && downloadInfo.link ? "If ".concat(displayName.toLowerCase(), " is installed on your device, please refresh this page or follow the browser instructions.") : "Download link not provided. Try searching it or consulting the developer team.",
      onClick: function onClick() {
        window.open(downloadInfo === null || downloadInfo === void 0 ? void 0 : downloadInfo.link, '_blank');
      },
      buttonDisabled: downloadInfo !== null && downloadInfo !== void 0 && downloadInfo.link ? false : true,
      icon: (downloadInfo === null || downloadInfo === void 0 ? void 0 : downloadInfo.icon) || _go.GoDesktopDownload
    },
    Disconnected: {
      logoStatus: _components.LogoStatus.Warning,
      header: isMobile ? 'Wallet Authorization' : 'Wallet is Disconnected',
      desc: isMobile ? 'Approve connection in wallet app' : void 0,
      buttonText: isMobile ? 'Open App' : 'Connect Wallet',
      onClick: function onClick() {
        return connect();
      },
      bottomLink: isMobile && downloadInfo ? /*#__PURE__*/_react2["default"].createElement(_react.Button, {
        variant: "link",
        onClick: function onClick() {
          window.open(downloadInfo === null || downloadInfo === void 0 ? void 0 : downloadInfo.link, '_blank');
        }
      }, /*#__PURE__*/_react2["default"].createElement(_react.Text, {
        as: "u",
        fontSize: "sm"
      }, "don't have a wallet?")) : void 0
    },
    Connected: {
      buttonText: 'Disconnect',
      onClick: function () {
        var _onClick = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return disconnect();
                case 2:
                  setDisplay('list');
                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        function onClick() {
          return _onClick.apply(this, arguments);
        }
        return onClick;
      }(),
      icon: /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
        as: _ri.RiDoorOpenFill
      })
    },
    Connecting: {
      logoStatus: _components.LogoStatus.Loading,
      header: "Connecting ".concat(current === null || current === void 0 ? void 0 : current.chain.pretty_name),
      desc: qrUrl ? "Approve ".concat(displayName, " connection request on your mobile.") : isMobile ? "Open ".concat(displayName, " to connect your wallet.") : "If there isn't a modal popping up, check your network or extension status."
    },
    Rejected: {
      logoStatus: _components.LogoStatus.Error,
      header: 'Request Rejected',
      desc: rejectMessageTarget || 'Connection permission is denied.',
      buttonText: 'Reconnect',
      onClick: function onClick() {
        return connect();
      }
    },
    Error: {
      logoStatus: _components.LogoStatus.Error,
      header: 'Oops! Something wrong...',
      desc: message,
      buttonText: 'Change Wallet',
      onClick: function onClick() {
        return setDisplay('list');
      }
    }
  };
  function getBottomButton() {
    var info = modalInfo[status];
    switch (status) {
      case 'Connecting':
        return void 0;
      case 'NotExist':
        return /*#__PURE__*/_react2["default"].createElement(InstallWalletButton, {
          icon: info.icon,
          text: info.buttonText,
          onClick: info.onClick,
          disabled: info.buttonDisabled || false
        });
      default:
        return /*#__PURE__*/_react2["default"].createElement(_react.Box, {
          px: 6
        }, /*#__PURE__*/_react2["default"].createElement(_components.ConnectWalletButton, {
          size: "lg",
          variant: "primary",
          leftIcon: info.icon,
          buttonText: info.buttonText,
          onClickConnectBtn: info.onClick
        }));
    }
  }
  function getModalContent() {
    if (status === 'Connected') {
      return /*#__PURE__*/_react2["default"].createElement(ModalContent, {
        logo: _components.Astronaut,
        username: username,
        walletIcon: typeof logo === 'string' && logo || void 0,
        addressButton: /*#__PURE__*/_react2["default"].createElement(_components.CopyAddressButton, {
          size: "sm",
          isRound: true,
          address: address
        }),
        bottomButton: getBottomButton()
      });
    }
    var info = modalInfo[status];
    return /*#__PURE__*/_react2["default"].createElement(ModalContent, {
      status: info.logoStatus,
      logo: logo,
      contentHeader: info.header,
      contentDesc: info.desc,
      bottomButton: getBottomButton(),
      bottomLink: info.bottomLink
    });
  }
  return [/*#__PURE__*/_react2["default"].createElement(ModalHead, {
    title: displayName,
    backButton: true,
    handleClose: function handleClose() {
      setOpen(false);
      if (status === 'Connecting') {
        disconnect();
      }
      setQRCodeWallet(void 0);
      setDisplay('single');
    },
    handleBack: function handleBack() {
      return setDisplay('list');
    }
  }), getModalContent()];
};
exports.getSingleWalletView = getSingleWalletView;