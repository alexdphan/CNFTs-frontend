"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWalletListView = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _components = require("../components");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var getWalletListView = function getWalletListView(version, wallet) {
  var wallets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var setOpen = arguments.length > 3 ? arguments[3] : undefined;
  var setDisplay = arguments.length > 4 ? arguments[4] : undefined;
  var setQRCodeWallet = arguments.length > 5 ? arguments[5] : undefined;
  var initialFocus = arguments.length > 6 ? arguments[6] : undefined;
  var ModalHead, DisplayWalletList;
  switch (version) {
    case 'simple_v1':
      DisplayWalletList = _components.SimpleDisplayWalletListV1;
      ModalHead = _components.SimpleModalHeadV1;
      break;
    case 'simple_v2':
      DisplayWalletList = _components.SimpleDisplayWalletList;
      ModalHead = _components.SimpleModalHead;
      break;
  }
  var walletsData = wallets.map(function (w) {
    return _objectSpread(_objectSpread({}, w.walletInfo), {}, {
      downloads: void 0,
      onClick: function () {
        var _onClick = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  setDisplay('single');
                  if (w.walletInfo.mode === 'wallet-connect' && !w.appUrl) {
                    setQRCodeWallet(w);
                  } else {
                    setQRCodeWallet(void 0);
                  }
                  window.localStorage.setItem('synchronize-mutex-wallet', 'fire');
                  _context.next = 5;
                  return w.connect();
                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        function onClick() {
          return _onClick.apply(this, arguments);
        }
        return onClick;
      }()
    });
  });
  return [/*#__PURE__*/_react["default"].createElement(ModalHead, {
    title: "Select your wallet",
    backButton: false,
    handleClose: function handleClose() {
      if (wallet && wallet.walletStatus !== 'Disconnected') {
        setDisplay('single');
      } else {
        setDisplay('list');
      }
      setQRCodeWallet(void 0);
      setOpen(false);
    }
  }), /*#__PURE__*/_react["default"].createElement(DisplayWalletList, {
    initialFocus: initialFocus,
    walletsData: version === 'simple_v2' ? walletsData.sort(function (a, b) {
      if (a.mode === b.mode) {
        return 0;
      } else if (a.mode !== 'wallet-connect') {
        return -1;
      } else {
        return 1;
      }
    }) : walletsData
  })];
};
exports.getWalletListView = getWalletListView;