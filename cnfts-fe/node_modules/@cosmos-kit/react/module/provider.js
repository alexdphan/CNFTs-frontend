/* eslint-disable @typescript-eslint/no-unused-vars */

import { WalletManager } from '@cosmos-kit/core';
import React, { createContext, useEffect, useMemo, useState } from 'react';
import { DefaultModal } from '.';
import { getModal } from './modal';
export const walletContext = /*#__PURE__*/createContext(null);
export const WalletProvider = ({
  chains,
  assetLists,
  wallets,
  walletModal,
  signerOptions,
  viewOptions,
  endpointOptions,
  storageOptions,
  sessionOptions,
  children
}) => {
  const walletManager = useMemo(() => new WalletManager(chains, assetLists, wallets, signerOptions, viewOptions, endpointOptions, storageOptions, sessionOptions), []);
  const [walletData, setWalletData] = useState();
  const [walletState, setWalletState] = useState(walletManager.state);
  const [walletMsg, setWalletMsg] = useState();
  const [walletName, setWalletName] = useState(walletManager.currentWalletName);
  const [isViewOpen, setViewOpen] = useState(false);
  const [chainName, setChainName] = useState();
  const [qrUrl, setQRUrl] = useState();
  walletManager.setActions({
    data: setWalletData,
    state: setWalletState,
    message: setWalletMsg,
    walletName: setWalletName,
    viewOpen: setViewOpen,
    chainName: setChainName,
    qrUrl: setQRUrl
  });
  const Modal = useMemo(() => {
    if (!walletModal) {
      return DefaultModal;
    } else if (typeof walletModal === 'string') {
      return getModal(walletModal);
    } else {
      return walletModal;
    }
  }, [walletModal]);
  useEffect(() => {
    walletManager.onMounted();
    return () => {
      walletManager.onUnmounted();
    };
  }, []);
  return /*#__PURE__*/React.createElement(walletContext.Provider, {
    value: {
      walletManager
    }
  }, children, /*#__PURE__*/React.createElement(Modal, {
    isOpen: isViewOpen,
    setOpen: setViewOpen
  }));
};