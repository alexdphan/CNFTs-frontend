/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */

import { WalletManagerV2 } from '@cosmos-kit/core';
import React, { createContext, useEffect, useMemo, useState } from 'react';
import { DefaultModalV2 } from '.';
import { getModalV2 } from './modal';
export const walletContextV2 = /*#__PURE__*/createContext(null);
export const ChainProvider = ({
  chains,
  assetLists,
  wallets,
  walletModal,
  modalTheme,
  signerOptions,
  // viewOptions,
  endpointOptions,
  sessionOptions,
  children
}) => {
  const walletManager = useMemo(() => new WalletManagerV2(chains, assetLists, wallets, signerOptions, endpointOptions, sessionOptions), []);
  const [isViewOpen, setViewOpen] = useState(false);
  const [viewWalletRepo, setViewWalletRepo] = useState();
  walletManager.walletRepos.forEach(wr => {
    const [, setData] = useState();
    const [state, setState] = useState(wr.state);
    const [msg, setMsg] = useState();
    wr.setActions({
      viewOpen: setViewOpen,
      viewWalletRepo: setViewWalletRepo
    });
    wr.wallets.forEach(w => {
      w.setActions({
        data: setData,
        state: setState,
        message: setMsg
      });
    });
  });
  const Modal = useMemo(() => {
    if (!walletModal) {
      return DefaultModalV2;
    } else if (typeof walletModal === 'string') {
      return getModalV2(walletModal);
    } else {
      return walletModal;
    }
  }, [walletModal]);
  useEffect(() => {
    walletManager.onMounted();
    return () => {
      walletManager.onUnmounted();
    };
  }, []);
  return /*#__PURE__*/React.createElement(walletContextV2.Provider, {
    value: {
      walletManager
    }
  }, children, /*#__PURE__*/React.createElement(Modal, {
    isOpen: isViewOpen,
    setOpen: setViewOpen,
    walletRepo: viewWalletRepo,
    theme: modalTheme
  }));
};