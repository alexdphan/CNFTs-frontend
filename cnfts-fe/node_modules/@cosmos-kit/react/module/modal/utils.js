/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */
import { Box, Button, Icon, Text } from '@chakra-ui/react';
import React from 'react';
import { GoDesktopDownload } from 'react-icons/go';
import { RiDoorOpenFill } from 'react-icons/ri';
import { Astronaut, ConnectWalletButton, CopyAddressButton, LogoStatus, SimpleDisplayModalContent, SimpleDisplayModalContentV1, SimpleDisplayWalletList, SimpleDisplayWalletListV1, SimpleInstallWalletButton, SimpleInstallWalletButtonV1, SimpleModalHead, SimpleModalHeadV1, SimpleQRCode, SimpleQRCodeV1 } from './components';
export const getModalDetails = (walletManager, modalIsReset, resetModal, handleClose, initialFocus, version) => {
  let ModalContent, DisplayWalletList, InstallWalletButton, QRCode, ModalHead;
  switch (version) {
    case 'simple_v1':
      ModalContent = SimpleDisplayModalContentV1;
      DisplayWalletList = SimpleDisplayWalletListV1;
      InstallWalletButton = SimpleInstallWalletButtonV1;
      QRCode = SimpleQRCodeV1;
      ModalHead = SimpleModalHeadV1;
      break;
    case 'simple_v2':
      ModalContent = SimpleDisplayModalContent;
      DisplayWalletList = SimpleDisplayWalletList;
      InstallWalletButton = SimpleInstallWalletButton;
      QRCode = SimpleQRCode;
      ModalHead = SimpleModalHead;
      break;
  }
  const {
    wallets,
    currentWallet: wallet,
    currentWalletInfo: walletInfo,
    walletStatus,
    address,
    username,
    message,
    isMobile,
    setCurrentWallet,
    connect,
    disconnect,
    isWalletDisconnected
  } = walletManager;
  let modalHead, modalContent;

  /* ================================== */
  /*           choose wallet            */
  /* ================================== */

  if (!wallet || modalIsReset) {
    modalHead = /*#__PURE__*/React.createElement(ModalHead, {
      title: "Select your wallet",
      backButton: false,
      handleClose: handleClose
    });
    const walletData = wallets.map(({
      walletInfo: {
        name,
        logo,
        prettyName,
        mode,
        mobileDisabled
      }
    }) => ({
      name,
      logo,
      prettyName,
      mode,
      mobileDisabled,
      onClick: async () => {
        resetModal(false);
        if (!isWalletDisconnected) {
          await disconnect();
        }
        setCurrentWallet(name);
        await connect();
      }
    }));
    modalContent = /*#__PURE__*/React.createElement(DisplayWalletList, {
      initialFocus: initialFocus,
      walletsData: version === 'simple_v2' ? walletData.sort((a, b) => {
        if (a.mode === b.mode) {
          return 0;
        } else if (a.mode !== 'wallet-connect') {
          return -1;
        } else {
          return 1;
        }
      }) : walletData
    });
    return [modalHead, modalContent];
  }

  /* ================================== */
  /*           selected wallet          */
  /* ================================== */

  if (!walletInfo) {
    throw new Error('No basic wallet information!');
  }
  const displayName = walletInfo.prettyName || walletInfo.name;

  /* ================================== */
  /*    selected wallet: modal head     */
  /* ================================== */

  function handleBack() {
    resetModal(true);
  }
  modalHead = /*#__PURE__*/React.createElement(ModalHead, {
    title: displayName,
    backButton: true,
    handleClose: handleClose,
    handleBack: handleBack
  });

  /* ================================== */
  /*   selected wallet: modal content   */
  /* ================================== */

  const {
    downloadInfo,
    walletName
  } = wallet;
  async function handleDisconnect() {
    await disconnect();
  }
  async function handleConnect() {
    setCurrentWallet(walletName);
    await connect();
  }
  function handleChangeWallet() {
    resetModal(true);
  }
  function handleOpenDownload() {
    if (downloadInfo?.link) {
      window.open(downloadInfo?.link, '_blank');
    }
  }
  const modalInfo = {
    NotExist: {
      logoStatus: LogoStatus.Error,
      header: `${displayName} Not Installed`,
      buttonText: `Install ${displayName}`,
      desc: downloadInfo?.link ? `If ${displayName.toLowerCase()} is installed on your device, please refresh this page or follow the browser instructions.` : `Download link not provided. Try searching it or consulting the developer team.`,
      onClick: handleOpenDownload,
      buttonDisabled: downloadInfo?.link ? false : true,
      icon: downloadInfo?.icon || GoDesktopDownload
    },
    Disconnected: {
      logoStatus: LogoStatus.Warning,
      header: isMobile ? 'Wallet Authorization' : 'Wallet is Disconnected',
      desc: isMobile ? 'Approve connection in wallet app' : void 0,
      buttonText: isMobile ? 'Open App' : 'Connect Wallet',
      onClick: handleConnect,
      bottomLink: isMobile && downloadInfo ? /*#__PURE__*/React.createElement(Button, {
        variant: "link",
        onClick: handleOpenDownload
      }, /*#__PURE__*/React.createElement(Text, {
        as: "u",
        fontSize: "sm"
      }, "don't have a wallet?")) : void 0
    },
    Connected: {
      buttonText: 'Disconnect',
      onClick: handleDisconnect,
      icon: /*#__PURE__*/React.createElement(Icon, {
        as: RiDoorOpenFill
      })
    },
    Connecting: {
      logoStatus: LogoStatus.Loading,
      header: 'Requesting Connection',
      desc: wallet.qrUrl ? `Approve ${displayName} connection request on your mobile.` : `Open ${displayName} to connect your wallet.`
    },
    Rejected: {
      logoStatus: LogoStatus.Error,
      header: 'Request Rejected',
      desc: wallet.rejectMessageTarget || 'Connection permission is denied.',
      buttonText: 'Reconnect',
      onClick: handleConnect
    },
    Error: {
      logoStatus: LogoStatus.Error,
      header: 'Oops! Something wrong...',
      desc: message,
      buttonText: 'Change Wallet',
      onClick: handleChangeWallet
    }
  };
  function getBottomButtonByStatus(status) {
    const info = modalInfo[status];
    switch (status) {
      case 'Connecting':
        return void 0;
      case 'NotExist':
        return /*#__PURE__*/React.createElement(InstallWalletButton, {
          icon: info.icon,
          text: info.buttonText,
          onClick: info.onClick,
          disabled: info.buttonDisabled
        });
      default:
        return /*#__PURE__*/React.createElement(Box, {
          px: 6
        }, /*#__PURE__*/React.createElement(ConnectWalletButton, {
          size: "lg",
          variant: "primary",
          leftIcon: info.icon,
          buttonText: info.buttonText,
          onClickConnectBtn: info.onClick
        }));
    }
  }
  function getModalContentByStatus(status) {
    if (!walletInfo) {
      throw new Error('No basic wallet information!');
    }
    if (status === 'Connected') {
      return /*#__PURE__*/React.createElement(ModalContent, {
        logo: Astronaut,
        username: username,
        walletIcon: typeof walletInfo.logo === 'string' && walletInfo.logo || void 0,
        addressButton: /*#__PURE__*/React.createElement(CopyAddressButton, {
          size: "sm",
          isRound: true,
          address: address
        }),
        bottomButton: getBottomButtonByStatus(status)
      });
    }
    if (status === 'Disconnected' && walletInfo.mode === 'wallet-connect' && !wallet.appUrl) {
      return /*#__PURE__*/React.createElement(QRCode, {
        link: wallet.qrUrl,
        description: `Open ${displayName} App to Scan`
      });
    }
    const info = modalInfo[status];
    return /*#__PURE__*/React.createElement(ModalContent, {
      status: info.logoStatus,
      logo: walletInfo.logo,
      contentHeader: info.header,
      contentDesc: info.desc,
      bottomButton: getBottomButtonByStatus(status),
      bottomLink: info.bottomLink
    });
  }
  modalContent = getModalContentByStatus(walletStatus);
  return [modalHead, modalContent];
};