import _extends from "@babel/runtime/helpers/esm/extends";
/* eslint-disable @typescript-eslint/no-explicit-any */
import { Box, Button, Center, Divider, Icon, Image, Link as ChakraLink, Stack, Text, Tooltip, useColorMode, useColorModeValue } from '@chakra-ui/react';
import React from 'react';
// use for let color mode value fit Rules of Hooks
export function handleChangeColorModeValue(colorMode, light, dark) {
  if (colorMode === 'light') return light;
  if (colorMode === 'dark') return dark;
}

// ðŸ”§ use forwardRef to fix ref-warnings =>
// https://github.com/vercel/next.js/issues/7915#issuecomment-745117649
export const DefaultLink = /*#__PURE__*/React.forwardRef((props, ref) => {
  return /*#__PURE__*/React.createElement(ChakraLink, _extends({
    w: "full",
    ref: ref,
    _hover: {
      textDecoration: 'none'
    },
    _focus: {
      outline: 'none'
    }
  }, props), props.children);
});
export const DefaultIconButton = ({
  icon,
  label,
  showTooltip,
  chakraButtonProps,
  chakraTooltipProps
}) => {
  return showTooltip ? /*#__PURE__*/React.createElement(Tooltip, _extends({
    label: label,
    hasArrow: true,
    bg: useColorModeValue('primary.300', 'primary.100')
  }, chakraTooltipProps), /*#__PURE__*/React.createElement(Button, _extends({
    boxShadow: useColorModeValue('0 2px 5px -2px #d1d1d1', '0 1px 1px #535353, 0 3px 4px -1px #222'),
    p: 2.5,
    _focus: {
      outline: 'none'
    }
  }, chakraButtonProps), /*#__PURE__*/React.createElement(Icon, {
    as: icon,
    w: 5,
    h: 5
  }))) : /*#__PURE__*/React.createElement(Button, _extends({
    boxShadow: useColorModeValue('0 2px 5px -2px #d1d1d1', '0 0 2px #555'),
    p: 2.5
  }, chakraButtonProps), /*#__PURE__*/React.createElement(Icon, {
    as: icon,
    w: 5,
    h: 5
  }));
};
export const ListLinkButton = ({
  text,
  chakraButtonProps
}) => {
  return /*#__PURE__*/React.createElement(Button, _extends({
    variant: "outline",
    boxShadow: "base",
    w: "full",
    h: 12,
    borderRadius: 5
  }, chakraButtonProps), text);
};
export const MenuLinkButton = ({
  icon,
  text,
  size = 'md'
}) => {
  const {
    colorMode
  } = useColorMode();
  const SIZES = {
    lg: {
      h: 12,
      fontSize: 'lg'
    },
    md: {
      h: 10,
      fontSize: 'md'
    },
    sm: {
      h: 8,
      fontSize: 'sm'
    }
  };
  return /*#__PURE__*/React.createElement(Button, {
    title: text,
    display: "flex",
    variant: "ghost",
    justifyContent: "start",
    alignItems: "center",
    fontSize: SIZES[size].fontSize,
    fontWeight: "medium",
    textAlign: "start",
    px: 2,
    w: "full",
    h: "full",
    minH: SIZES[size].h,
    maxH: "fit-content",
    whiteSpace: "break-spaces",
    lineHeight: 1.1,
    _hover: {
      bg: handleChangeColorModeValue(colorMode, 'gray.200', 'gray.700')
    },
    _focus: {
      boxShadow: '0 0 0 2px #C47CCF'
    }
  }, /*#__PURE__*/React.createElement(Stack, {
    isInline: true,
    spacing: 2,
    alignItems: "center"
  }, icon, /*#__PURE__*/React.createElement(Text, null, text)));
};
export const TextWithIconLink = ({
  text,
  icon
}) => /*#__PURE__*/React.createElement(Stack, {
  isInline: true,
  alignItems: "center",
  spacing: 1,
  opacity: 0.7
}, /*#__PURE__*/React.createElement(Text, {
  fontWeight: "semibold"
}, text), /*#__PURE__*/React.createElement(Icon, {
  as: icon
}));
export const DefaultIcon = ({
  size = 'md',
  icon
}) => {
  const SIZES = {
    lg: {
      imageSize: 9
    },
    md: {
      imageSize: 8
    },
    sm: {
      imageSize: 6
    }
  };
  if (typeof icon === 'string') return /*#__PURE__*/React.createElement(Center, {
    borderRadius: "full",
    overflow: "hidden",
    w: SIZES[size].imageSize,
    minW: SIZES[size].imageSize,
    maxW: SIZES[size].imageSize,
    h: SIZES[size].imageSize,
    minH: SIZES[size].imageSize,
    maxH: SIZES[size].imageSize
  }, /*#__PURE__*/React.createElement(Image, {
    w: "full",
    alt: icon,
    src: icon,
    fallbackSrc: 'https://dummyimage.com/200x200/cfcfcf/fff&text=X'
  }));
  return /*#__PURE__*/React.createElement(Center, {
    borderRadius: "full",
    overflow: "hidden",
    w: SIZES[size].imageSize,
    minW: SIZES[size].imageSize,
    maxW: SIZES[size].imageSize,
    h: SIZES[size].imageSize,
    minH: SIZES[size].imageSize,
    maxH: SIZES[size].imageSize
  }, icon);
};
export const DefaultCard = ({
  title,
  children
}) => {
  return /*#__PURE__*/React.createElement(Box, {
    w: "full",
    bg: useColorModeValue('white', 'gray.700'),
    boxShadow: useColorModeValue('0 2px 3px #e3e3e3', '0 1px 3px #6e6e6e, 0 5px 12px -5px #858585'),
    borderRadius: "lg",
    p: 6
  }, /*#__PURE__*/React.createElement(Text, {
    fontWeight: "semibold",
    fontSize: "lg"
  }, title), /*#__PURE__*/React.createElement(Box, {
    mx: -6
  }, /*#__PURE__*/React.createElement(Divider, {
    my: 6
  })), children);
};