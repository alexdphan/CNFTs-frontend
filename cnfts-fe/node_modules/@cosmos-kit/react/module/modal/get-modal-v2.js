import { ChakraProvider, createLocalStorageManager, useColorMode } from '@chakra-ui/react';
import React, { useMemo, useRef } from 'react';
import { useEffect, useState } from 'react';
import { SimpleConnectModal as ConnectModal } from './components';
import { noCssResetTheme } from './theme';
import { getSingleWalletView, getWalletListView } from './utils-v2';
export const getModalV2 = version => {
  return ({
    isOpen,
    setOpen,
    walletRepo,
    theme
  }) => {
    const initialFocus = useRef();
    const [display, setDisplay] = useState('list');
    const [qrCodeWallet, setQRCodeWallet] = useState();
    const [modalHead, setModalHead] = useState();
    const [modalContent, setModalContent] = useState();
    const [colorMode, setColorMode] = useState('light');
    const {
      colorMode: _colorMode
    } = useColorMode();
    const wallets = walletRepo?.wallets;
    const current = walletRepo?.current;
    const singleViewDeps = [current, current?.walletStatus, current?.qrUrl, qrCodeWallet?.qrUrl, display];
    const listViewDeps = [wallets];
    const [singleViewHead, singleViewContent] = useMemo(() => getSingleWalletView(version, current, qrCodeWallet, setOpen, setDisplay, setQRCodeWallet), singleViewDeps);
    const [listViewHead, listViewContent] = useMemo(() => getWalletListView(version, current, wallets, setOpen, setDisplay, setQRCodeWallet, initialFocus), listViewDeps);
    useEffect(() => {
      if (display === 'list' || !current && !qrCodeWallet || current && current.walletStatus === 'Disconnected') {
        setModalHead(listViewHead);
        setModalContent(listViewContent);
      } else {
        setModalHead(singleViewHead);
        setModalContent(singleViewContent);
      }
    }, [...singleViewDeps, ...listViewDeps, display]);
    useEffect(() => {
      setColorMode(window.localStorage.getItem('chakra-ui-color-mode'));
    }, [_colorMode]);
    const modal = /*#__PURE__*/React.createElement(ConnectModal, {
      modalIsOpen: isOpen,
      modalOnClose: () => {
        if (!current || current.walletStatus === 'Disconnected') {
          setDisplay('list');
        } else {
          setDisplay('single');
        }
        setQRCodeWallet(void 0);
        setOpen(false);
      },
      modalHead: modalHead,
      modalContent: modalContent,
      initialRef: initialFocus
    });
    if (colorMode) {
      return modal;
    }
    return /*#__PURE__*/React.createElement(ChakraProvider, {
      theme: theme || noCssResetTheme,
      resetCSS: true,
      colorModeManager: createLocalStorageManager('chakra-ui-color-mode') // let modal get global color mode
    }, modal);
  };
};