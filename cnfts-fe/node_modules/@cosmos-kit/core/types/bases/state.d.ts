import { Actions, AppEnv, Mutable, State, StateActions } from '../types';
export declare class StateBase<T> {
    protected _mutable: Mutable<T>;
    actions?: StateActions<T>;
    protected _env?: AppEnv;
    constructor();
    get env(): AppEnv;
    setEnv(env?: AppEnv): void;
    setActions: (actions: Actions) => void;
    get isMobile(): boolean;
    get mutable(): Mutable<T>;
    get state(): State;
    get isInit(): boolean;
    get isDone(): boolean;
    get isError(): boolean;
    get isPending(): boolean;
    get data(): T;
    get message(): string;
    setState(state: State): void;
    setData(data: T | undefined): void;
    setMessage(message: string | undefined): void;
    reset(): void;
    get walletStatus(): import("../types").WalletStatus;
    get isWalletOnceConnect(): boolean;
    get isWalletConnecting(): boolean;
    get isConnectingWC(): boolean;
    get isWalletConnected(): boolean;
    get isWalletDisconnected(): boolean;
    get isWalletRejected(): boolean;
    get isWalletNotExist(): boolean;
    get isWalletError(): boolean;
}
