import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */
import { State } from '../types';
import { ClientNotExistError, RejectedError } from '../utils';
import { StateBase } from './state';
export class WalletBase extends StateBase {
  constructor(walletInfo) {
    super();
    _defineProperty(this, "clientPromise", void 0);
    _defineProperty(this, "client", void 0);
    _defineProperty(this, "_walletInfo", void 0);
    _defineProperty(this, "_appUrl", void 0);
    _defineProperty(this, "_qrUrl", void 0);
    _defineProperty(this, "callbacks", void 0);
    _defineProperty(this, "disconnect", async callbacks => {
      await (callbacks || this.callbacks)?.beforeDisconnect?.();
      this.reset();
      window.localStorage.removeItem('chain-provider');
      await this.client?.disconnect?.();
      await (callbacks || this.callbacks)?.afterDisconnect?.();
    });
    _defineProperty(this, "connect", async (sessionOptions, callbacks) => {
      await (callbacks || this.callbacks)?.beforeConnect?.();
      if (this.isMobile && this.walletInfo.mobileDisabled) {
        this.setError('This wallet is not supported on mobile, please use desktop browsers.');
        return;
      }
      try {
        this.client = this.client || (await this.clientPromise) || (await this.fetchClient());
        if (!this.client) {
          this.setClientNotExist();
          return;
        }
        await this.update();
        if (sessionOptions?.duration) {
          setTimeout(() => {
            this.disconnect(callbacks);
          }, sessionOptions?.duration);
        }
      } catch (error) {
        this.setError(error);
      }
      await (callbacks || this.callbacks)?.afterConnect?.();
    });
    this._walletInfo = walletInfo;
  }
  get walletInfo() {
    return this._walletInfo;
  }
  get downloadInfo() {
    let downloads = this.walletInfo.downloads || [];
    downloads = downloads.filter(d => d.device === this.env?.device || !d.device);
    if (downloads.length === 1) {
      return downloads[0];
    }
    downloads = downloads.filter(d => d.os === this.env?.os || !d.os);
    if (downloads.length === 1) {
      return downloads[0];
    }
    downloads = downloads.filter(d => d.browser === this.env?.browser || !d.browser);
    return downloads[0];
  }
  get walletName() {
    return this.walletInfo.name;
  }
  get walletPrettyName() {
    return this.walletInfo.prettyName;
  }
  get rejectMessageSource() {
    if (typeof this.walletInfo.rejectMessage === 'string') {
      return this.walletInfo.rejectMessage;
    } else {
      return this.walletInfo.rejectMessage?.source;
    }
  }
  get rejectMessageTarget() {
    if (typeof this.walletInfo.rejectMessage === 'string') {
      return void 0;
    } else {
      return this.walletInfo.rejectMessage?.target;
    }
  }
  get rejectCode() {
    return this.walletInfo.rejectCode;
  }
  rejectMatched(e) {
    return this.rejectMessageSource && e.message === this.rejectMessageSource || this.rejectCode && e.code === this.rejectCode;
  }
  get appUrl() {
    return this._appUrl;
  }
  get qrUrl() {
    return this._qrUrl;
  }
  updateCallbacks(callbacks) {
    this.callbacks = _objectSpread(_objectSpread({}, this.callbacks), callbacks);
  }
  setClientNotExist() {
    this.setState(State.Error);
    this.setMessage(ClientNotExistError.message);
  }
  setRejected() {
    this.setState(State.Error);
    this.setMessage(RejectedError.message);
  }
  setError(e) {
    this.setState(State.Error);
    this.setMessage(typeof e === 'string' ? e : e.message);
    if (typeof e !== 'string' && e.stack) {
      console.error(e.stack);
    }
  }
}