import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/* eslint-disable no-console */

import Bowser from 'bowser';
import { StateBase } from './bases';
import { State } from './types';
import { convertChain } from './utils';
export class WalletManager extends StateBase {
  constructor(_chains, _assetLists, _wallets, _signerOptions, viewOptions, _endpointOptions, storageOptions, sessionOptions) {
    super();
    _defineProperty(this, "_currentWalletName", void 0);
    _defineProperty(this, "_currentChainName", void 0);
    _defineProperty(this, "_activeWallets", []);
    _defineProperty(this, "_totalWallets", []);
    _defineProperty(this, "_chainRecords", []);
    _defineProperty(this, "viewOptions", {
      alwaysOpenView: false,
      closeViewWhenWalletIsConnected: false,
      closeViewWhenWalletIsDisconnected: true,
      closeViewWhenWalletIsRejected: false
    });
    _defineProperty(this, "storageOptions", {
      disabled: false,
      duration: 1800000,
      clearOnTabClose: false
    });
    _defineProperty(this, "sessionOptions", {
      duration: 1800000,
      killOnTabClose: false
    });
    _defineProperty(this, "setChains", (chains, assetLists, signerOptions, endpointOptions) => {
      this._chainRecords = chains.map(chain => convertChain(chain, assetLists, signerOptions, endpointOptions?.[chain.chain_name]));
      console.info(`${this.chainCount} chains are available!`);
      this._totalWallets.forEach(wallet => {
        wallet.setChains(this._chainRecords);
      });
    });
    _defineProperty(this, "setWallets", wallets => {
      this._totalWallets = wallets;
      console.info(`${this.walletCount} wallets are available!`);
      this._totalWallets.forEach(wallet => {
        wallet.setChains(this._chainRecords);
      });
    });
    _defineProperty(this, "setActiveWalletNames", walletNames => {
      if (walletNames) {
        this._activeWallets = this._totalWallets.filter(wallet => walletNames.includes(wallet.walletName));
      } else {
        this._activeWallets = this._totalWallets;
      }
    });
    _defineProperty(this, "enable", async chainIds => {
      await this.currentWallet?.client?.enable?.(chainIds);
    });
    _defineProperty(this, "getRpcEndpoint", async () => {
      return await this.currentWallet?.getRpcEndpoint?.();
    });
    _defineProperty(this, "getRestEndpoint", async () => {
      return await this.currentWallet?.getRestEndpoint?.();
    });
    _defineProperty(this, "getStargateClient", async () => {
      return await this.currentWallet?.getStargateClient?.();
    });
    _defineProperty(this, "getCosmWasmClient", async () => {
      return await this.currentWallet?.getCosmWasmClient?.();
    });
    _defineProperty(this, "getSigningStargateClient", async () => {
      return await this.currentWallet?.getSigningStargateClient?.();
    });
    _defineProperty(this, "getSigningCosmWasmClient", async () => {
      return await this.currentWallet?.getSigningCosmWasmClient?.();
    });
    _defineProperty(this, "sign", async (messages, fee, memo, type) => {
      return await this.currentWallet?.sign?.(messages, fee, memo, type);
    });
    _defineProperty(this, "broadcast", async (signedMessages, type) => {
      return await this.currentWallet?.broadcast?.(signedMessages, type);
    });
    _defineProperty(this, "signAndBroadcast", async (messages, fee, memo, type) => {
      return await this.currentWallet?.signAndBroadcast?.(messages, fee, memo, type);
    });
    _defineProperty(this, "reset", () => {
      this.currentWallet?.reset();
    });
    _defineProperty(this, "updateLocalStorage", target => {
      if (!this.useStorage) {
        return;
      }
      let storeObj = {};
      const storeStr = window?.localStorage.getItem('cosmos-kit');
      if (storeStr) {
        storeObj = JSON.parse(storeStr);
      }
      switch (target) {
        case 'chain':
          storeObj = _objectSpread(_objectSpread({}, storeObj), {}, {
            currentChainName: this.currentChainName
          });
          break;
        case 'wallet':
          storeObj = _objectSpread(_objectSpread({}, storeObj), {}, {
            currentWalletName: this.currentWalletName
          });
          break;
        default:
          storeObj = _objectSpread(_objectSpread({}, storeObj), {}, {
            currentWalletName: this.currentWalletName,
            currentChainName: this.currentChainName
          });
          break;
      }
      window?.localStorage.setItem('cosmos-kit', JSON.stringify(storeObj));
      if (this.storageOptions.duration) {
        setTimeout(() => {
          window?.localStorage.removeItem('cosmos-kit');
        }, this.storageOptions.duration);
      }
    });
    _defineProperty(this, "setCurrentWallet", walletName => {
      this.reset();
      this._currentWalletName = walletName;
      this.emitWalletName?.(walletName);
    });
    _defineProperty(this, "setCurrentChain", chainName => {
      this.reset();
      this._currentChainName = chainName;
      this.emitChainName?.(chainName);
      this.updateLocalStorage('chain');
    });
    _defineProperty(this, "getWallet", (walletName, chainName) => {
      let wallet = this._totalWallets.find(w => w.walletName === walletName);
      if (!wallet) {
        throw new Error(`${walletName} is not provided!`);
      }
      if (chainName) {
        wallet = wallet.getChainWallet(chainName);
        if (!wallet) {
          throw new Error(`Unknown chain name: ${chainName}`);
        }
      }
      wallet.actions = this.actions;
      return wallet;
    });
    _defineProperty(this, "getChainRecord", chainName => {
      if (!chainName) {
        return void 0;
      }
      const chainRecord = this.chainRecords.find(c => c.name === chainName);
      if (!chainRecord) {
        throw new Error(`${chainName} is not provided!`);
      }
      return chainRecord;
    });
    _defineProperty(this, "getChainLogo", chainName => {
      const chainRecord = this.getChainRecord(chainName);
      return (
        // until chain_registry fix this
        // chainRecord?.chain.logo_URIs?.svg ||
        // chainRecord?.chain.logo_URIs?.png ||
        // chainRecord?.chain.logo_URIs?.jpeg ||
        chainRecord?.assetList?.assets[0]?.logo_URIs?.svg || chainRecord?.assetList?.assets[0]?.logo_URIs?.png || undefined
      );
    });
    _defineProperty(this, "connect", async () => {
      const current = this.currentWallet;
      if (!current) {
        this.openView();
        return;
      }
      if (this.viewOptions?.alwaysOpenView) {
        this.openView();
      }
      if (current.isWalletNotExist || current.isWalletError) {
        this.openView();
      }
      try {
        current.setEnv(this.env);
        await current.connect(this.sessionOptions, this.callbacks);
        if (this.isWalletConnected && this.viewOptions?.closeViewWhenWalletIsConnected) {
          this.closeView();
        }
      } catch (error) {
        console.error(error);
        if (this.isWalletRejected && this.viewOptions?.closeViewWhenWalletIsRejected) {
          this.closeView();
        }
      }
    });
    _defineProperty(this, "disconnect", async () => {
      const current = this.currentWallet;
      if (!current) {
        this.setMessage('Current Wallet not defined.');
        return;
      }
      if (this.viewOptions?.alwaysOpenView) {
        this.openView();
      }
      try {
        await current.disconnect(this.callbacks);
        if (this.isWalletConnected && this.viewOptions?.closeViewWhenWalletIsDisconnected) {
          this.closeView();
        }
      } catch (e) {
        this.setMessage(e.message);
        if (this.isWalletRejected && this.viewOptions?.closeViewWhenWalletIsRejected) {
          this.closeView();
        }
      }
    });
    _defineProperty(this, "openView", () => {
      this.emitViewOpen?.(true);
    });
    _defineProperty(this, "closeView", () => {
      this.emitViewOpen?.(false);
    });
    _defineProperty(this, "_handleTabLoad", event => {
      event?.preventDefault();
      this.connect();
    });
    _defineProperty(this, "_handleTabClose", event => {
      event.preventDefault();
      if (this.storageOptions.clearOnTabClose) {
        window.localStorage.removeItem('cosmos-kit');
      }
      if (this.sessionOptions.killOnTabClose || this.isWalletConnecting) {
        this.disconnect();
      }
    });
    _defineProperty(this, "_connectEventListener", async () => {
      if (!this.isInit) {
        await this.connect();
      }
    });
    _defineProperty(this, "onMounted", () => {
      if (typeof window === 'undefined') {
        return;
      }
      const parser = Bowser.getParser(window.navigator.userAgent);
      this.setEnv({
        browser: parser.getBrowserName(true),
        device: parser.getPlatform().type || 'desktop',
        os: parser.getOSName(true)
      });
      if (this.useStorage) {
        const storeStr = window.localStorage.getItem('cosmos-kit');
        if (storeStr) {
          const {
            currentWalletName,
            currentChainName
          } = JSON.parse(storeStr);
          this.setCurrentWallet(currentWalletName);
          this.setCurrentChain(currentChainName);
          if (currentWalletName) {
            if (document.readyState !== 'complete') {
              window.addEventListener('load', this._handleTabLoad);
            } else {
              this._handleTabLoad();
            }
          }
        }
        window.addEventListener('beforeunload', this._handleTabClose);
        this.wallets.forEach(wallet => {
          wallet.walletInfo.connectEventNamesOnWindow?.forEach(eventName => {
            window.addEventListener(eventName, this._connectEventListener);
          });
          wallet.walletInfo.connectEventNamesOnClient?.forEach(async eventName => {
            (wallet.client || (await wallet.clientPromise))?.on?.(eventName, this._connectEventListener);
          });
        });
      }
    });
    _defineProperty(this, "onUnmounted", () => {
      if (typeof window === 'undefined') {
        return;
      }
      window.removeEventListener('beforeunload', this._handleTabClose);
      window.removeEventListener('load', this._handleTabLoad);
      this.wallets.forEach(wallet => {
        wallet.walletInfo.connectEventNamesOnWindow?.forEach(eventName => {
          window.removeEventListener(eventName, this._connectEventListener);
        });
        wallet.walletInfo.connectEventNamesOnClient?.forEach(async eventName => {
          (wallet.client || (await wallet.clientPromise))?.off?.(eventName, this._connectEventListener);
        });
      });
    });
    this.setWallets(_wallets);
    this.setActiveWalletNames();
    this.setChains(_chains, _assetLists, _signerOptions, _endpointOptions);
    this.viewOptions = _objectSpread(_objectSpread({}, this.viewOptions), viewOptions);
    this.storageOptions = _objectSpread(_objectSpread({}, this.storageOptions), storageOptions);
    this.sessionOptions = _objectSpread(_objectSpread({}, this.sessionOptions), sessionOptions);
  }
  get wallets() {
    if (this.isMobile) {
      return this._activeWallets.filter(wallet => !wallet.walletInfo.mobileDisabled);
    }
    return this._activeWallets;
  }
  get chainRecords() {
    return this._chainRecords;
  }
  get useStorage() {
    return !this.storageOptions.disabled;
  }
  get currentWalletName() {
    if (!this._currentWalletName && this.walletCount === 1) {
      return this._totalWallets[0].walletName;
    }
    return this._currentWalletName;
  }
  get currentChainName() {
    if (!this._currentChainName && this.chainCount === 1) {
      return this.chainRecords[0].name;
    }
    return this._currentChainName;
  }
  get currentWallet() {
    return this.currentWalletName ? this.getWallet(this.currentWalletName, this.currentChainName) : void 0;
  }
  get currentWalletInfo() {
    return this.currentWallet?.walletInfo;
  }
  get currentChainRecord() {
    return this.getChainRecord(this.currentChainName);
  }
  get data() {
    return this.currentWallet?.data;
  }
  get state() {
    return this.currentWallet?.state || State.Init;
  }
  get message() {
    return this.currentWallet?.message;
  }
  get username() {
    return this.data?.username;
  }
  get address() {
    return this.data?.address;
  }
  get offlineSigner() {
    return this.data?.offlineSigner;
  }
  get walletNames() {
    return this._totalWallets.map(wallet => wallet.walletName);
  }
  get walletCount() {
    return this.walletNames.length;
  }
  get chainNames() {
    return this.chainRecords.map(chain => chain.name);
  }
  get chainCount() {
    return this.chainNames.length;
  }
  get emitWalletName() {
    return this.actions?.walletName;
  }
  get emitChainName() {
    return this.actions?.chainName;
  }
  get emitViewOpen() {
    return this.actions?.viewOpen;
  }
  get callbacks() {
    return {
      afterConnect: () => {
        if (!this.isWalletDisconnected) {
          this.updateLocalStorage('wallet');
        }
      },
      afterDisconnect: () => {
        this.setCurrentWallet(undefined);
        this.updateLocalStorage('wallet');
      }
    };
  }
}