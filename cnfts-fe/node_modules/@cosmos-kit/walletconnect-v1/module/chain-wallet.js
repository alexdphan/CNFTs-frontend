import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { ChainWalletBase } from '@cosmos-kit/core';
export class ChainWCV1 extends ChainWalletBase {
  constructor(walletInfo, chainInfo) {
    super(walletInfo, chainInfo);
    _defineProperty(this, "client", void 0);
    _defineProperty(this, "emitter", void 0);
    _defineProperty(this, "connect", async (sessionOptions, callbacks) => {
      this.setMessage('About to connect.');
      this.emitter.removeAllListeners();
      this.emitter.on('update', async () => {
        await this.update(sessionOptions, callbacks);
      });
      this.emitter.on('disconnect', async () => {
        await this.disconnect(callbacks);
      });
      if (!this.connector.connected) {
        await this.connector.createSession();
      } else {
        if (!this.isMobile) {
          await this.update(sessionOptions, callbacks);
        }
      }
      if (this.isMobile) {
        await this.update(sessionOptions, callbacks);
        if (window && this.appUrl) {
          window.location.href = this.appUrl;
        }
      }
    });
    _defineProperty(this, "disconnect", async callbacks => {
      await (callbacks || this.callbacks)?.beforeDisconnect?.();
      if (this.connector.connected) {
        await this.connector.killSession();
      }
      this.reset();
      this.emitter.removeAllListeners();
      window.localStorage.removeItem('chain-provider');
      await this.client?.disconnect?.();
      await (callbacks || this.callbacks)?.afterDisconnect?.();
    });
  }
  get connector() {
    return this.client?.connector;
  }
  get qrUrl() {
    return this.connector?.uri;
  }
  get appUrl() {
    return this.client?.getAppUrl(this.env?.os);
  }
}