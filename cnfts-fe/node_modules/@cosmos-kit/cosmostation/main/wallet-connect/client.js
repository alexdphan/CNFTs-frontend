"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CosmostationClient = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _client = _interopRequireDefault(require("@walletconnect/client"));
var _utils = require("@walletconnect/utils");
var CosmostationClient = /*#__PURE__*/function () {
  function CosmostationClient() {
    (0, _classCallCheck2["default"])(this, CosmostationClient);
    (0, _defineProperty2["default"])(this, "connector", void 0);
    this.connector = new _client["default"]({
      bridge: 'https://bridge.walletconnect.org',
      signingMethods: ['cosmostation_wc_accounts_v1', 'cosmostation_wc_sign_tx_v1']
    });
  }
  (0, _createClass2["default"])(CosmostationClient, [{
    key: "qrUrl",
    get: function get() {
      return this.connector.uri;
    }
  }, {
    key: "getAppUrl",
    value: function getAppUrl(os) {
      switch (os) {
        case 'android':
          (0, _utils.saveMobileLinkInfo)({
            name: 'Cosmostation',
            href: 'intent://wc#Intent;package=wannabit.io.cosmostaion;scheme=cosmostation;end;'
          });
          return "intent://wc?".concat(this.qrUrl, "#Intent;package=wannabit.io.cosmostaion;scheme=cosmostation;end;");
        case 'ios':
          (0, _utils.saveMobileLinkInfo)({
            name: 'Cosmostation',
            href: 'cosmostation://wc'
          });
          return "cosmostation://wc?".concat(this.qrUrl);
        default:
          return void 0;
      }
    }
  }, {
    key: "getAccount",
    value: function () {
      var _getAccount = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(chainId) {
        var result;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.connector.sendCustomRequest({
                  id: (0, _utils.payloadId)(),
                  jsonrpc: '2.0',
                  method: 'cosmostation_wc_accounts_v1',
                  params: [chainId]
                });
              case 2:
                result = _context.sent[0];
                return _context.abrupt("return", {
                  name: result.name,
                  address: result.bech32Address,
                  algo: result.algo,
                  pubkey: result.pubKey,
                  isNanoLedger: result.isNanoLedger
                });
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function getAccount(_x) {
        return _getAccount.apply(this, arguments);
      }
      return getAccount;
    }()
  }, {
    key: "getOfflineSignerAmino",
    value: function getOfflineSignerAmino(chainId) {
      var _this = this;
      return {
        getAccounts: function () {
          var _getAccounts = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return _this.getAccount(chainId);
                  case 2:
                    _context2.t0 = _context2.sent;
                    return _context2.abrupt("return", [_context2.t0]);
                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          function getAccounts() {
            return _getAccounts.apply(this, arguments);
          }
          return getAccounts;
        }(),
        signAmino: function signAmino(signerAddress, signDoc) {
          return _this.signAmino(chainId, signerAddress, signDoc);
        }
      };
    }
  }, {
    key: "getOfflineSigner",
    value: function () {
      var _getOfflineSigner = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(chainId) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.getOfflineSignerAmino(chainId));
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function getOfflineSigner(_x2) {
        return _getOfflineSigner.apply(this, arguments);
      }
      return getOfflineSigner;
    }()
  }, {
    key: "signAmino",
    value: function () {
      var _signAmino = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(chainId, signer, signDoc) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.connector.sendCustomRequest({
                  id: (0, _utils.payloadId)(),
                  jsonrpc: '2.0',
                  method: 'cosmostation_wc_sign_tx_v1',
                  params: [chainId, signer, signDoc]
                });
              case 2:
                return _context4.abrupt("return", _context4.sent[0]);
              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function signAmino(_x3, _x4, _x5) {
        return _signAmino.apply(this, arguments);
      }
      return signAmino;
    }()
  }]);
  return CosmostationClient;
}();
exports.CosmostationClient = CosmostationClient;