import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import WalletConnect from '@walletconnect/client';
import { payloadId, saveMobileLinkInfo } from '@walletconnect/utils';
export class CosmostationClient {
  constructor() {
    _defineProperty(this, "connector", void 0);
    this.connector = new WalletConnect({
      bridge: 'https://bridge.walletconnect.org',
      signingMethods: ['cosmostation_wc_accounts_v1', 'cosmostation_wc_sign_tx_v1']
    });
  }
  get qrUrl() {
    return this.connector.uri;
  }
  getAppUrl(os) {
    switch (os) {
      case 'android':
        saveMobileLinkInfo({
          name: 'Cosmostation',
          href: 'intent://wc#Intent;package=wannabit.io.cosmostaion;scheme=cosmostation;end;'
        });
        return `intent://wc?${this.qrUrl}#Intent;package=wannabit.io.cosmostaion;scheme=cosmostation;end;`;
      case 'ios':
        saveMobileLinkInfo({
          name: 'Cosmostation',
          href: 'cosmostation://wc'
        });
        return `cosmostation://wc?${this.qrUrl}`;
      default:
        return void 0;
    }
  }
  async getAccount(chainId) {
    const result = (await this.connector.sendCustomRequest({
      id: payloadId(),
      jsonrpc: '2.0',
      method: 'cosmostation_wc_accounts_v1',
      params: [chainId]
    }))[0];
    return {
      name: result.name,
      address: result.bech32Address,
      algo: result.algo,
      pubkey: result.pubKey,
      isNanoLedger: result.isNanoLedger
    };
  }
  getOfflineSignerAmino(chainId) {
    return {
      getAccounts: async () => {
        return [await this.getAccount(chainId)];
      },
      signAmino: (signerAddress, signDoc) => this.signAmino(chainId, signerAddress, signDoc)
    };
  }
  async getOfflineSigner(chainId) {
    return this.getOfflineSignerAmino(chainId);
  }
  async signAmino(chainId, signer, signDoc) {
    return (await this.connector.sendCustomRequest({
      id: payloadId(),
      jsonrpc: '2.0',
      method: 'cosmostation_wc_sign_tx_v1',
      params: [chainId, signer, signDoc]
    }))[0];
  }
}