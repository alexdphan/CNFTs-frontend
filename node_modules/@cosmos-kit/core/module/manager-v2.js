import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable no-console */

import Bowser from 'bowser';
import { StateBase } from './bases';
import { WalletRepo } from './repository';
import { convertChain } from './utils';
export class WalletManagerV2 extends StateBase {
  constructor(chains, assetLists, wallets, signerOptions, endpointOptions, sessionOptions) {
    super();
    _defineProperty(this, "chainRecords", []);
    _defineProperty(this, "walletRepos", []);
    _defineProperty(this, "options", {
      synchroMutexWallet: true
    });
    _defineProperty(this, "sessionOptions", {
      duration: 1800000,
      killOnTabClose: false
    });
    _defineProperty(this, "getWalletRepo", chainName => {
      const walletRepo = this.walletRepos.find(wr => wr.chainName === chainName);
      if (!walletRepo) {
        throw new Error(`Chain ${chainName} is not provided.`);
      }
      return walletRepo;
    });
    _defineProperty(this, "getChainRecord", chainName => {
      if (!chainName) {
        return void 0;
      }
      const chainRecord = this.chainRecords.find(c => c.name === chainName);
      if (!chainRecord) {
        throw new Error(`${chainName} is not provided!`);
      }
      return chainRecord;
    });
    _defineProperty(this, "getChainLogo", chainName => {
      const chainRecord = this.getChainRecord(chainName);
      return (
        // until chain_registry fix this
        // chainRecord?.chain.logo_URIs?.svg ||
        // chainRecord?.chain.logo_URIs?.png ||
        // chainRecord?.chain.logo_URIs?.jpeg ||
        chainRecord?.assetList?.assets[0]?.logo_URIs?.svg || chainRecord?.assetList?.assets[0]?.logo_URIs?.png || undefined
      );
    });
    _defineProperty(this, "_handleConnect", async () => {
      const ls = window.localStorage;
      const walletName = ls.getItem('chain-provider');
      if (walletName) {
        ls.setItem('synchronize-mutex-wallet', 'fire');
        await this.walletReposInUse[0]?.connect(walletName);
      }
    });
    _defineProperty(this, "onMounted", () => {
      if (typeof window === 'undefined') {
        return;
      }
      this._handleConnect();
      const parser = Bowser.getParser(window.navigator.userAgent);
      const env = {
        browser: parser.getBrowserName(true),
        device: parser.getPlatform().type || 'desktop',
        os: parser.getOSName(true)
      };
      this.setEnv(env);
      this.walletRepos.forEach(repo => repo.setEnv(env));
      this.walletRepos[0]?.wallets.forEach(wallet => {
        wallet.walletInfo.connectEventNamesOnWindow?.forEach(eventName => {
          window.addEventListener(eventName, this._handleConnect);
        });
        wallet.walletInfo.connectEventNamesOnClient?.forEach(async eventName => {
          (wallet.client || (await wallet.clientPromise))?.on?.(eventName, this._handleConnect);
        });
      });
    });
    _defineProperty(this, "onUnmounted", () => {
      if (typeof window === 'undefined') {
        return;
      }
      this.walletRepos[0]?.wallets.forEach(wallet => {
        wallet.walletInfo.connectEventNamesOnWindow?.forEach(eventName => {
          window.removeEventListener(eventName, this._handleConnect);
        });
        wallet.walletInfo.connectEventNamesOnClient?.forEach(async eventName => {
          (wallet.client || (await wallet.clientPromise))?.off?.(eventName, this._handleConnect);
        });
      });
    });
    this.sessionOptions = _objectSpread(_objectSpread({}, this.sessionOptions), sessionOptions);
    console.info(`${chains.length} chains and ${wallets.length} wallets are provided!`);
    this.chainRecords = chains.map(chain => convertChain(chain, assetLists, signerOptions, endpointOptions?.[chain.chain_name]));
    wallets.forEach(wallet => {
      wallet.setChains(this.chainRecords);
    });
    if (this.options.synchroMutexWallet) {
      wallets.forEach(({
        chainWallets
      }) => {
        chainWallets?.forEach(w => {
          w.updateCallbacks({
            afterDisconnect: async () => {
              chainWallets.forEach(async w2 => {
                if (!w2.isWalletDisconnected && w2 !== w) {
                  await w2.disconnect();
                }
              });
            },
            afterConnect: async () => {
              this.synchronizeMutexWalletConnection();
            }
          });
        });
      });
    }
    this.chainRecords.map(chainRecord => {
      this.walletRepos.push(new WalletRepo(chainRecord, wallets.map(({
        getChainWallet
      }) => getChainWallet(chainRecord.name)), this.sessionOptions));
    });
  }
  get walletReposInUse() {
    return this.walletRepos.filter(repo => repo.isInUse === true);
  }
  async synchronizeMutexWalletConnection() {
    if (typeof window === 'undefined') {
      return;
    }
    const ls = window.localStorage;
    if (ls.getItem('synchronize-mutex-wallet') === 'done') {
      return;
    }
    ls.setItem('synchronize-mutex-wallet', 'done');
    const walletName = ls.getItem('chain-provider');
    for (const repo of this.walletReposInUse) {
      if (walletName) {
        if (repo.current?.walletName !== walletName) {
          await repo.current?.disconnect();
        }
        await repo.connect(walletName);
      }
    }
  }
}