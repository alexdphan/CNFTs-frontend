import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/* eslint-disable @typescript-eslint/no-explicit-any */

import React from 'react';
import { SimpleDisplayWalletList, SimpleDisplayWalletListV1, SimpleModalHead, SimpleModalHeadV1 } from '../components';
export const getWalletListView = (version, wallet, wallets = [], setOpen, setDisplay, setQRCodeWallet, initialFocus) => {
  let ModalHead, DisplayWalletList;
  switch (version) {
    case 'simple_v1':
      DisplayWalletList = SimpleDisplayWalletListV1;
      ModalHead = SimpleModalHeadV1;
      break;
    case 'simple_v2':
      DisplayWalletList = SimpleDisplayWalletList;
      ModalHead = SimpleModalHead;
      break;
  }
  const walletsData = wallets.map(w => _objectSpread(_objectSpread({}, w.walletInfo), {}, {
    downloads: void 0,
    onClick: async () => {
      setDisplay('single');
      if (w.walletInfo.mode === 'wallet-connect' && !w.appUrl) {
        setQRCodeWallet(w);
      } else {
        setQRCodeWallet(void 0);
      }
      window.localStorage.setItem('synchronize-mutex-wallet', 'fire');
      await w.connect();
    }
  }));
  return [/*#__PURE__*/React.createElement(ModalHead, {
    title: "Select your wallet",
    backButton: false,
    handleClose: () => {
      if (wallet && wallet.walletStatus !== 'Disconnected') {
        setDisplay('single');
      } else {
        setDisplay('list');
      }
      setQRCodeWallet(void 0);
      setOpen(false);
    }
  }), /*#__PURE__*/React.createElement(DisplayWalletList, {
    initialFocus: initialFocus,
    walletsData: version === 'simple_v2' ? walletsData.sort((a, b) => {
      if (a.mode === b.mode) {
        return 0;
      } else if (a.mode !== 'wallet-connect') {
        return -1;
      } else {
        return 1;
      }
    }) : walletsData
  })];
};