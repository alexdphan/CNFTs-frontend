import { ChakraProvider, createLocalStorageManager, useColorMode } from '@chakra-ui/react';
import React, { useRef } from 'react';
import { useEffect, useState } from 'react';
import { useWallet } from '../hooks';
import { SimpleConnectModal as ConnectModal } from './components';
import { noCssResetTheme } from './theme';
import { getModalDetails } from './utils';
export const getModal = version => {
  return ({
    isOpen,
    setOpen
  }) => {
    const walletManager = useWallet();
    const {
      walletStatus,
      currentWallet,
      disconnect,
      setCurrentWallet
    } = walletManager;
    const [modalHead, setModalHead] = useState();
    const [modalContent, setModalContent] = useState();
    const [modalIsReset, resetModal] = useState(false);
    const initialFocus = useRef();
    function handleClose() {
      setOpen(false);
      if (walletManager.isWalletConnecting) {
        disconnect();
      } else if (walletManager.isWalletDisconnected) {
        setCurrentWallet(undefined);
      }
    }
    useEffect(() => {
      const [_modalHead, _modalContent] = getModalDetails(walletManager, modalIsReset, resetModal, handleClose, initialFocus, version);
      setModalHead(_modalHead);
      setModalContent(_modalContent);
      if (!isOpen) {
        resetModal(false);
      }
    }, [walletStatus, modalIsReset, isOpen, currentWallet?.qrUrl]);
    const modal = /*#__PURE__*/React.createElement(ConnectModal, {
      modalIsOpen: isOpen,
      modalOnClose: handleClose,
      modalHead: modalHead,
      modalContent: modalContent,
      initialRef: initialFocus
    });
    const {
      colorMode
    } = useColorMode();
    if (colorMode) {
      return modal;
    }
    return /*#__PURE__*/React.createElement(ChakraProvider, {
      theme: noCssResetTheme,
      resetCSS: true,
      colorModeManager: createLocalStorageManager('chakra-ui-color-mode') // let modal get global color mode
    }, modal);
  };
};