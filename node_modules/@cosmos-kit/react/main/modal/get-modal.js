"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getModal = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@chakra-ui/react");
var _react2 = _interopRequireWildcard(require("react"));
var _hooks = require("../hooks");
var _components = require("./components");
var _theme = require("./theme");
var _utils = require("./utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var getModal = function getModal(version) {
  return function (_ref) {
    var isOpen = _ref.isOpen,
      setOpen = _ref.setOpen;
    var walletManager = (0, _hooks.useWallet)();
    var walletStatus = walletManager.walletStatus,
      currentWallet = walletManager.currentWallet,
      disconnect = walletManager.disconnect,
      setCurrentWallet = walletManager.setCurrentWallet;
    var _useState = (0, _react2.useState)(),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      modalHead = _useState2[0],
      setModalHead = _useState2[1];
    var _useState3 = (0, _react2.useState)(),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      modalContent = _useState4[0],
      setModalContent = _useState4[1];
    var _useState5 = (0, _react2.useState)(false),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      modalIsReset = _useState6[0],
      resetModal = _useState6[1];
    var initialFocus = (0, _react2.useRef)();
    function handleClose() {
      setOpen(false);
      if (walletManager.isWalletConnecting) {
        disconnect();
      } else if (walletManager.isWalletDisconnected) {
        setCurrentWallet(undefined);
      }
    }
    (0, _react2.useEffect)(function () {
      var _getModalDetails = (0, _utils.getModalDetails)(walletManager, modalIsReset, resetModal, handleClose, initialFocus, version),
        _getModalDetails2 = (0, _slicedToArray2["default"])(_getModalDetails, 2),
        _modalHead = _getModalDetails2[0],
        _modalContent = _getModalDetails2[1];
      setModalHead(_modalHead);
      setModalContent(_modalContent);
      if (!isOpen) {
        resetModal(false);
      }
    }, [walletStatus, modalIsReset, isOpen, currentWallet === null || currentWallet === void 0 ? void 0 : currentWallet.qrUrl]);
    var modal = /*#__PURE__*/_react2["default"].createElement(_components.SimpleConnectModal, {
      modalIsOpen: isOpen,
      modalOnClose: handleClose,
      modalHead: modalHead,
      modalContent: modalContent,
      initialRef: initialFocus
    });
    var _useColorMode = (0, _react.useColorMode)(),
      colorMode = _useColorMode.colorMode;
    if (colorMode) {
      return modal;
    }
    return /*#__PURE__*/_react2["default"].createElement(_react.ChakraProvider, {
      theme: _theme.noCssResetTheme,
      resetCSS: true,
      colorModeManager: (0, _react.createLocalStorageManager)('chakra-ui-color-mode') // let modal get global color mode
    }, modal);
  };
};
exports.getModal = getModal;