"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleQRCode = exports.SimpleInstallWalletButton = exports.SimpleDisplayWalletList = exports.SimpleDisplayModalContent = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@chakra-ui/react");
var _qrcode = require("qrcode.react");
var _react2 = _interopRequireWildcard(require("react"));
var _defaultComponent = require("./default-component");
var _motionComponent = require("./motion-component");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-non-null-assertion */

var SimpleInstallWalletButton = function SimpleInstallWalletButton(_ref) {
  var icon = _ref.icon,
    text = _ref.text,
    onClick = _ref.onClick,
    disabled = _ref.disabled;
  var _useColorMode = (0, _react.useColorMode)(),
    colorMode = _useColorMode.colorMode;
  return /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    w: "full",
    px: 6
  }, /*#__PURE__*/_react2["default"].createElement(_react.Button, {
    variant: "unstyled",
    w: "full",
    h: "auto",
    fontWeight: "medium",
    fontSize: "md",
    color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'rgba(37, 57, 201, 0.72)', 'rgba(196, 203, 255, 0.9)'),
    border: "1px solid",
    borderColor: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, '#ffffff', 'rgba(0, 0, 0, 0.25)'),
    bg: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'rgba(37, 57, 201, 0.1)', 'rgba(40, 62, 219, 0.15)'),
    boxShadow: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, '0 0 1px 2px rgba(37, 57, 201, 0.5)', '0 0 1px 2px rgba(196, 203, 255, 0.5)'),
    _hover: {
      opacity: 0.8
    },
    _active: {
      opacity: 0.9
    },
    _focus: {
      outline: 'none'
    },
    _disabled: {
      opacity: 0.5,
      cursor: 'not-allowed',
      _hover: {
        opacity: 0.5
      },
      _active: {
        opacity: 0.5
      }
    },
    isDisabled: disabled,
    onClick: onClick
  }, /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    w: "full",
    isInline: true,
    justifyContent: "center",
    alignItems: "center",
    p: 3
  }, icon && /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    as: icon
  }), /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    whiteSpace: "break-spaces"
  }, text ? text : "Install Wallet"))));
};
exports.SimpleInstallWalletButton = SimpleInstallWalletButton;
var SimpleDisplayModalContent = function SimpleDisplayModalContent(_ref2) {
  var _Style;
  var status = _ref2.status,
    logo = _ref2.logo,
    contentHeader = _ref2.contentHeader,
    contentDesc = _ref2.contentDesc,
    username = _ref2.username,
    walletIcon = _ref2.walletIcon,
    addressButton = _ref2.addressButton,
    bottomButton = _ref2.bottomButton;
  var _useColorMode2 = (0, _react.useColorMode)(),
    colorMode = _useColorMode2.colorMode;
  var Style = {
    warning: {
      color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'orange.300', 'orange.400')
    },
    error: {
      color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'red.400', 'red.500')
    },
    loading: {
      color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'inherit', 'inherit')
    }
  };
  return /*#__PURE__*/_react2["default"].createElement(_motionComponent.AnimateBox, {
    initial: "hidden",
    animate: "enter",
    exit: "exit",
    variants: _motionComponent.ModalContentVariants
  }, /*#__PURE__*/_react2["default"].createElement(_react.Flex, {
    w: 80,
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    p: 4,
    pt: 5
  }, logo && /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    position: "relative",
    mx: "auto",
    w: 20,
    h: 20,
    minW: 20,
    minH: 20,
    maxW: 20,
    maxH: 20,
    mb: typeof logo === 'string' ? 4 : 2
  }, status === 'loading' && /*#__PURE__*/_react2["default"].createElement(_motionComponent.AnimateBox, {
    position: "absolute",
    top: -1.5,
    right: -1.5,
    bottom: -1.5,
    left: -1.5,
    border: "2px solid",
    borderTopColor: "transparent",
    borderBottomColor: "transparent",
    borderLeftColor: "purple.300",
    borderRightColor: "purple.300",
    borderRadius: "full",
    initial: "hidden",
    animate: "animate",
    variants: _motionComponent.LoadingVariants
  }), (status === 'warning' || status === 'error') && /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    position: "absolute",
    top: -2,
    right: -2,
    bottom: -2,
    left: -2,
    border: "2px solid",
    borderColor: Style[status].color,
    borderRadius: "full"
  }), /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    borderRadius: "full",
    p: typeof logo === 'string' ? 3.5 : 0
  }, typeof logo === 'string' ? /*#__PURE__*/_react2["default"].createElement(_react.Image, {
    src: logo,
    w: "full",
    h: "full"
  }) : /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    as: logo,
    w: "full",
    h: "full"
  }))), contentHeader && /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    fontSize: "md",
    fontWeight: "semibold",
    color: ((_Style = Style[status]) === null || _Style === void 0 ? void 0 : _Style.color) || (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'gray.800', 'white'),
    mb: 1
  }, contentHeader), contentDesc && /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    fontSize: "sm",
    lineHeight: 1.3,
    opacity: 0.7,
    whiteSpace: "pre-line",
    color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'gray.800', 'white'),
    px: 8
  }, contentDesc), username && /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    isInline: true,
    justifyContent: "center",
    alignItems: "center"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    w: 4,
    h: 4,
    minW: 4,
    minH: 4,
    maxW: 4,
    maxH: 4,
    mt: 0.5
  }, /*#__PURE__*/_react2["default"].createElement(_react.Image, {
    src: walletIcon
  })), /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    fontSize: "lg",
    fontWeight: "semibold",
    color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'gray.800', 'white')
  }, username)), addressButton && /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    w: "full",
    pt: 2.5,
    px: 8
  }, addressButton), bottomButton && /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    w: "full",
    pt: 3.5
  }, bottomButton)));
};
exports.SimpleDisplayModalContent = SimpleDisplayModalContent;
var SimpleQRCode = function SimpleQRCode(_ref3) {
  var link = _ref3.link,
    description = _ref3.description;
  var elementRef = (0, _react2.useRef)(null);
  var dimensions = (0, _react.useDimensions)(elementRef);
  var _useColorMode3 = (0, _react.useColorMode)(),
    colorMode = _useColorMode3.colorMode;
  return /*#__PURE__*/_react2["default"].createElement(_motionComponent.AnimateBox, {
    ref: elementRef,
    initial: "hidden",
    animate: "enter",
    exit: "exit",
    variants: _motionComponent.ModalContentVariants
  }, /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    w: 80,
    justifyContent: "center",
    alignItems: "center",
    spacing: 4,
    p: 4
  }, description && /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    fontWeight: "medium",
    textAlign: "center",
    opacity: 0.75,
    color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'gray.800', 'white')
  }, description), /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    px: 2
  }, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    w: "full",
    border: "1px solid",
    borderColor: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'blackAlpha.100', 'whiteAlpha.600'),
    borderRadius: "lg",
    boxShadow: "base",
    p: 5
  }, /*#__PURE__*/_react2["default"].createElement(_qrcode.QRCodeSVG, {
    value: link,
    size: dimensions ? dimensions.contentBox.width - 24 : void 0,
    bgColor: '#ffffff',
    fgColor: '#000000',
    level: 'L',
    includeMargin: false
  })))));
};
exports.SimpleQRCode = SimpleQRCode;
var SimpleDisplayWalletList = function SimpleDisplayWalletList(_ref4) {
  var initialFocus = _ref4.initialFocus,
    walletsData = _ref4.walletsData;
  var _useColorMode4 = (0, _react.useColorMode)(),
    colorMode = _useColorMode4.colorMode;
  var listRef = (0, _react2.useRef)(null);
  var _useState = (0, _react2.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    displayBlur = _useState2[0],
    setDisplayBlur = _useState2[1];
  (0, _react2.useEffect)(function () {
    var current = listRef.current;
    if (listRef && current) {
      if (current.clientHeight >= 311) setDisplayBlur(true);
      var scrollHandler = function scrollHandler() {
        var height = Math.abs((current === null || current === void 0 ? void 0 : current.scrollHeight) - (current === null || current === void 0 ? void 0 : current.clientHeight) - (current === null || current === void 0 ? void 0 : current.scrollTop));
        if (height < 1) setDisplayBlur(false);
        if (height >= 1) setDisplayBlur(true);
      };
      current.addEventListener('scroll', scrollHandler);
    }
  }, [listRef]);
  return /*#__PURE__*/_react2["default"].createElement(_motionComponent.AnimateBox, {
    initial: "hidden",
    animate: "enter",
    variants: _motionComponent.ModalContentVariants
  }, /*#__PURE__*/_react2["default"].createElement(_react.Grid, {
    ref: listRef,
    position: "relative",
    templateColumns: {
      base: '1fr',
      md: '1fr 1fr'
    },
    templateRows: {
      base: 'max-content',
      md: 'auto'
    },
    columnGap: 2.5,
    rowGap: 1,
    maxH: 80,
    minH: 36,
    w: 80,
    overflowY: "scroll",
    paddingInline: 0,
    py: 0.5,
    px: 4,
    mt: 0.5,
    css: {
      // for firefox
      scrollbarWidth: 'none',
      // for chrome
      '::-webkit-scrollbar': {
        display: 'none'
      }
    }
  }, walletsData.map(function (_ref5, i) {
    var name = _ref5.name,
      prettyName = _ref5.prettyName,
      logo = _ref5.logo,
      onClick = _ref5.onClick;
    return /*#__PURE__*/_react2["default"].createElement(_react.GridItem, {
      key: i,
      colSpan: {
        base: 2,
        md: i > 1 ? 2 : 'auto'
      },
      w: "full"
    }, /*#__PURE__*/_react2["default"].createElement(_react.Button, {
      ref: i === 0 ? initialFocus : null,
      id: name,
      key: name,
      variant: "unstyled",
      display: "flex",
      w: "full",
      h: "fit-content",
      p: {
        base: 2,
        md: i > 1 ? 2 : 3
      },
      py: {
        md: i > 1 ? 2 : 7
      },
      mb: {
        base: 0,
        md: i > 1 ? 0 : 1.5
      },
      justifyContent: "start",
      borderRadius: "md",
      whiteSpace: "break-spaces",
      color: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'blackAlpha.800', 'whiteAlpha.800'),
      transition: "all .1s ease-in-out",
      bg: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, 'gray.100', 'blackAlpha.500'),
      _hover: {
        boxShadow: '0 0 0 1px #6A66FF'
      },
      _focus: {
        borderRadius: 'md',
        boxShadow: '0 0 0 1px #6A66FF'
      },
      onClick: onClick
    }, /*#__PURE__*/_react2["default"].createElement(_react.Flex, {
      w: "full",
      flexDirection: {
        base: 'row',
        md: i > 1 ? 'row' : 'column'
      },
      justifyContent: "start",
      alignItems: "center"
    }, /*#__PURE__*/_react2["default"].createElement(_react.Box, {
      borderRadius: "lg",
      overflow: "hidden",
      w: {
        base: 8,
        md: i > 1 ? 8 : 14
      },
      h: {
        base: 8,
        md: i > 1 ? 8 : 14
      },
      minW: {
        base: 8,
        md: i > 1 ? 8 : 14
      },
      minH: {
        base: 8,
        md: i > 1 ? 8 : 14
      },
      maxW: {
        base: 8,
        md: i > 1 ? 8 : 14
      },
      maxH: {
        base: 8,
        md: i > 1 ? 8 : 14
      },
      mr: {
        base: 4,
        md: i > 1 ? 4 : 0
      },
      mb: {
        base: 0,
        md: i > 1 ? 0 : 3
      }
    }, /*#__PURE__*/_react2["default"].createElement(_react.Image, {
      src: typeof logo === 'string' ? logo : void 0
    })), /*#__PURE__*/_react2["default"].createElement(_react.Box, {
      textAlign: "start",
      flex: 1
    }, /*#__PURE__*/_react2["default"].createElement(_react.Text, {
      fontSize: "sm",
      fontWeight: "normal",
      lineHeight: 1.1
    }, prettyName)))));
  }), /*#__PURE__*/_react2["default"].createElement(_motionComponent.AnimateGridItem, {
    initial: false,
    animate: displayBlur ? {
      opacity: 1,
      height: 2,
      transition: {
        type: 'spring',
        duration: 0.1
      }
    } : {
      height: 0,
      opacity: 0,
      transition: {
        type: 'spring',
        duration: 0.2
      }
    },
    position: "sticky",
    bg: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, '#fff', 'gray.700'),
    style: {
      marginTop: 0
    },
    colSpan: 2,
    bottom: -2,
    w: "full",
    boxShadow: (0, _defaultComponent.handleChangeColorModeValue)(colorMode, '0 -3px 2px 2px #fff, 0 -4px 6px 2px #fff, 0 -4px 4px 2px #fff, 0 -5px 10px 2px #fff, 0 -8px 4px #fff, 0 -8px 6px 1px #fff, 0 -8px 8px 1px #fff', '0 -3px 2px 2px #2D3748, 0 -4px 6px 2px #2D3748, 0 -4px 4px 2px #2D3748, 0 -5px 10px 2px #2D3748, 0 -8px 4px #2D3748, 0 -8px 6px 1px #2D3748, 0 -8px 8px 1px #2D3748')
  })));
};
exports.SimpleDisplayWalletList = SimpleDisplayWalletList;