"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWallet = exports.useChain = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _core = require("@cosmos-kit/core");
var _react = _interopRequireDefault(require("react"));
var _provider = require("./provider");
var _providerV = require("./provider-v2");
/* eslint-disable @typescript-eslint/no-explicit-any */

var useWallet = function useWallet() {
  var context = _react["default"].useContext(_provider.walletContext);
  if (!context || !context.walletManager) {
    throw new Error('You have forgot to use WalletProvider.');
  }
  return context.walletManager;
};
exports.useWallet = useWallet;
var useChain = function useChain(chainName) {
  var context = _react["default"].useContext(_providerV.walletContextV2);
  if (!context) {
    throw new Error('You have forgot to use WalletProviderV2.');
  }
  var walletManager = context.walletManager;
  var walletRepo = walletManager.getWalletRepo(chainName);
  walletRepo.isInUse = true;
  var connect = walletRepo.connect,
    disconnect = walletRepo.disconnect,
    openView = walletRepo.openView,
    closeView = walletRepo.closeView,
    current = walletRepo.current,
    _walletRepo$chainReco = walletRepo.chainRecord,
    chain = _walletRepo$chainReco.chain,
    assetList = _walletRepo$chainReco.assetList,
    getRpcEndpoint = walletRepo.getRpcEndpoint,
    getRestEndpoint = walletRepo.getRestEndpoint,
    getStargateClient = walletRepo.getStargateClient,
    getCosmWasmClient = walletRepo.getCosmWasmClient;
  var chainId = chain.chain_id;
  function connectionAssert(func) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var name = arguments.length > 2 ? arguments[2] : undefined;
    if (!current) {
      throw new Error("Wallet not connected yet.");
    }
    if (!func) {
      throw new Error("Function ".concat(name, " not implemented by ").concat(current === null || current === void 0 ? void 0 : current.walletInfo.prettyName, " yet."));
    }
    return func.apply(void 0, (0, _toConsumableArray2["default"])(params));
  }
  function clientMethodAssert(func) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var name = arguments.length > 2 ? arguments[2] : undefined;
    if (!current) {
      throw new Error("Wallet not connected yet.");
    }
    if (!(current !== null && current !== void 0 && current.client)) {
      throw new Error("Wallet Client not defined.");
    }
    if (!func) {
      throw new Error("Function ".concat(name, " not implemented by ").concat(current === null || current === void 0 ? void 0 : current.walletInfo.prettyName, " Client yet."));
    }
    return func.apply(void 0, (0, _toConsumableArray2["default"])(params));
  }
  return {
    // walletRepo: walletRepo,
    // wallet: current,

    chain: chain,
    assets: assetList,
    logoUrl: current === null || current === void 0 ? void 0 : current.chainLogoUrl,
    wallet: current === null || current === void 0 ? void 0 : current.walletInfo,
    address: current === null || current === void 0 ? void 0 : current.address,
    username: current === null || current === void 0 ? void 0 : current.username,
    message: current ? current.message : 'No wallet is connected currently.',
    status: (current === null || current === void 0 ? void 0 : current.walletStatus) || _core.WalletStatus.Disconnected,
    openView: openView,
    closeView: closeView,
    connect: connect,
    disconnect: disconnect,
    getRpcEndpoint: getRpcEndpoint,
    getRestEndpoint: getRestEndpoint,
    getStargateClient: getStargateClient,
    getCosmWasmClient: getCosmWasmClient,
    getSigningStargateClient: function getSigningStargateClient() {
      return connectionAssert(current === null || current === void 0 ? void 0 : current.getSigningStargateClient, [], 'getSigningStargateClient');
    },
    getSigningCosmWasmClient: function getSigningCosmWasmClient() {
      return connectionAssert(current === null || current === void 0 ? void 0 : current.getSigningCosmWasmClient, [], 'getSigningCosmWasmClient');
    },
    estimateFee: function estimateFee() {
      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }
      return connectionAssert(current === null || current === void 0 ? void 0 : current.estimateFee, params, 'estimateFee');
    },
    sign: function sign() {
      for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        params[_key2] = arguments[_key2];
      }
      return connectionAssert(current === null || current === void 0 ? void 0 : current.sign, params, 'sign');
    },
    broadcast: function broadcast() {
      for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        params[_key3] = arguments[_key3];
      }
      return connectionAssert(current === null || current === void 0 ? void 0 : current.broadcast, params, 'broadcast');
    },
    signAndBroadcast: function signAndBroadcast() {
      for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        params[_key4] = arguments[_key4];
      }
      return connectionAssert(current === null || current === void 0 ? void 0 : current.signAndBroadcast, params, 'signAndBroadcast');
    },
    enable: function enable(chainIds) {
      var _current$client;
      return clientMethodAssert(current === null || current === void 0 ? void 0 : (_current$client = current.client) === null || _current$client === void 0 ? void 0 : _current$client.enable, [chainIds || chainId], 'enable');
    },
    getOfflineSigner: function getOfflineSigner() {
      var _current$client2;
      return clientMethodAssert(current === null || current === void 0 ? void 0 : (_current$client2 = current.client) === null || _current$client2 === void 0 ? void 0 : _current$client2.getOfflineSigner, [chainId], 'getOfflineSigner');
    },
    getOfflineSignerAmino: function getOfflineSignerAmino() {
      var _current$client3;
      return clientMethodAssert(current === null || current === void 0 ? void 0 : (_current$client3 = current.client) === null || _current$client3 === void 0 ? void 0 : _current$client3.getOfflineSignerAmino, [chainId], 'getOfflineSignerAmino');
    },
    getOfflineSignerDirect: function getOfflineSignerDirect() {
      var _current$client4;
      return clientMethodAssert(current === null || current === void 0 ? void 0 : (_current$client4 = current.client) === null || _current$client4 === void 0 ? void 0 : _current$client4.getOfflineSignerDirect, [chainId], 'getOfflineSignerDirect');
    },
    signAmino: function signAmino() {
      var _current$client5;
      for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        params[_key5] = arguments[_key5];
      }
      return clientMethodAssert(current === null || current === void 0 ? void 0 : (_current$client5 = current.client) === null || _current$client5 === void 0 ? void 0 : _current$client5.signAmino, [chainId].concat(params), 'signAmino');
    },
    signDirect: function signDirect() {
      var _current$client6;
      for (var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        params[_key6] = arguments[_key6];
      }
      return clientMethodAssert(current === null || current === void 0 ? void 0 : (_current$client6 = current.client) === null || _current$client6 === void 0 ? void 0 : _current$client6.signDirect, [chainId].concat(params), 'signDirect');
    },
    sendTx: function sendTx() {
      var _current$client7;
      for (var _len7 = arguments.length, params = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        params[_key7] = arguments[_key7];
      }
      return clientMethodAssert(current === null || current === void 0 ? void 0 : (_current$client7 = current.client) === null || _current$client7 === void 0 ? void 0 : _current$client7.sendTx, [chainId].concat(params), 'sendTx');
    }
  };
};
exports.useChain = useChain;