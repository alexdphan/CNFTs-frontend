import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
/* eslint-disable no-console */

import WalletConnect from '@walletconnect/client';
import { payloadId, saveMobileLinkInfo } from '@walletconnect/utils';
import deepmerge from 'deepmerge';
export class KeplrClient {
  constructor() {
    _defineProperty(this, "defaultOptions", {});
    _defineProperty(this, "connector", void 0);
    this.connector = new WalletConnect({
      bridge: 'https://bridge.walletconnect.org',
      signingMethods: ['keplr_enable_wallet_connect_v1', 'keplr_get_key_wallet_connect_v1', 'keplr_sign_amino_wallet_connect_v1']
    });
  }
  get qrUrl() {
    return this.connector.uri;
  }
  getAppUrl(os) {
    switch (os) {
      case 'android':
        saveMobileLinkInfo({
          name: 'Keplr',
          href: 'intent://wcV1#Intent;package=com.chainapsis.keplr;scheme=keplrwallet;end;'
        });
        return `intent://wcV1?${this.qrUrl}#Intent;package=com.chainapsis.keplr;scheme=keplrwallet;end;`;
      case 'ios':
        saveMobileLinkInfo({
          name: 'Keplr',
          href: 'keplrwallet://wcV1'
        });
        return `keplrwallet://wcV1?${this.qrUrl}`;
      default:
        return void 0;
    }
  }
  async enable(chainIds) {
    if (typeof chainIds === 'string') {
      chainIds = [chainIds];
    }
    await this.connector.sendCustomRequest({
      id: payloadId(),
      jsonrpc: '2.0',
      method: 'keplr_enable_wallet_connect_v1',
      params: chainIds
    });
  }
  async getAccount(chainId) {
    const response = (await this.connector.sendCustomRequest({
      id: payloadId(),
      jsonrpc: '2.0',
      method: 'keplr_get_key_wallet_connect_v1',
      params: [chainId]
    }))[0];
    return {
      name: response.name,
      address: response.bech32Address,
      algo: response.algo,
      pubkey: Buffer.from(response.pubKey, 'hex')
    };
  }
  getOfflineSigner(chainId) {
    return {
      getAccounts: async () => {
        return [await this.getAccount(chainId)];
      },
      signAmino: (signerAddress, signDoc) => this.signAmino(chainId, signerAddress, signDoc)
    };
  }
  async signAmino(chainId, signer, signDoc, signOptions = {}) {
    return (await this.connector.sendCustomRequest({
      id: payloadId(),
      jsonrpc: '2.0',
      method: 'keplr_sign_amino_wallet_connect_v1',
      params: [chainId, signer, signDoc, deepmerge(this.defaultOptions.sign ?? {}, signOptions)]
    }))[0];
  }
}